{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/events`;\n  }\n  getEvents() {\n    return this.http.get(this.apiUrl);\n  }\n  getEvent(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  createEvent(event) {\n    return this.http.post(this.apiUrl, event);\n  }\n  updateEvent(id, event) {\n    return this.http.put(`${this.apiUrl}/${id}`, event);\n  }\n  deleteEvent(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getOrganizerEvents() {\n    return this.http.get(`${environment.apiUrl}/api/users/my-events`);\n  }\n  static {\n    this.ɵfac = function EventService_Factory(t) {\n      return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EventService,\n      factory: EventService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","EventService","constructor","http","apiUrl","getEvents","get","getEvent","id","createEvent","event","post","updateEvent","put","deleteEvent","delete","getOrganizerEvents","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\event.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../environments/environment';\r\nimport { Event, TicketCategory } from '../models/event.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class EventService {\r\n  private apiUrl = `${environment.apiUrl}/events`;\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getEvents(): Observable<Event[]> {\r\n    return this.http.get<Event[]>(this.apiUrl);\r\n  }\r\n\r\n  getEvent(id: string): Observable<Event> {\r\n    return this.http.get<Event>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  createEvent(event: Event): Observable<Event> {\r\n    return this.http.post<Event>(this.apiUrl, event);\r\n  }\r\n\r\n  updateEvent(id: string, event: Event): Observable<Event> {\r\n    return this.http.put<Event>(`${this.apiUrl}/${id}`, event);\r\n  }\r\n\r\n  deleteEvent(id: string): Observable<void> {\r\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  getOrganizerEvents(): Observable<Event[]> {\r\n    return this.http.get<Event[]>(`${environment.apiUrl}/api/users/my-events`);\r\n  }\r\n} "],"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,SAAS;EAER;EAEvCC,SAASA,CAAA;IACP,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAU,IAAI,CAACF,MAAM,CAAC;EAC5C;EAEAG,QAAQA,CAACC,EAAU;IACjB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAQ,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EACrD;EAEAC,WAAWA,CAACC,KAAY;IACtB,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAQ,IAAI,CAACP,MAAM,EAAEM,KAAK,CAAC;EAClD;EAEAE,WAAWA,CAACJ,EAAU,EAAEE,KAAY;IAClC,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAQ,GAAG,IAAI,CAACT,MAAM,IAAII,EAAE,EAAE,EAAEE,KAAK,CAAC;EAC5D;EAEAI,WAAWA,CAACN,EAAU;IACpB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,IAAII,EAAE,EAAE,CAAC;EACvD;EAEAQ,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACb,IAAI,CAACG,GAAG,CAAU,GAAGN,WAAW,CAACI,MAAM,sBAAsB,CAAC;EAC5E;;;uBA3BWH,YAAY,EAAAgB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAZnB,YAAY;MAAAoB,OAAA,EAAZpB,YAAY,CAAAqB,IAAA;MAAAC,UAAA,EAFX;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}