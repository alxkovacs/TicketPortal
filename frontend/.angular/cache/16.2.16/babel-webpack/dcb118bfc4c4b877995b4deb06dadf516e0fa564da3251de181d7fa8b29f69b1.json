{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId, categoryId, quantity) {\n    // Végső próbálkozásként több más formátumot is kipróbálunk\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // Talán nincs is szükség kategóriára, csak magunk küldjük el a minimális adatokat\n    const simplestPayload = {\n      event: eventId,\n      quantity: Number(quantity)\n    };\n    // Vagy talán a kategória nevét várja azonosító helyett ('Álló')\n    const payloadWithNamedCategory = {\n      eventId: eventId,\n      category: \"Álló\",\n      quantity: quantity\n    };\n    // Végső kísérlet legegyszerűbb formában\n    const finalPayload = {\n      eventId: eventId,\n      // Talán vagy az egyiket vagy a másikat várja\n      category: categoryId,\n      categoryId: categoryId,\n      // A többi mező\n      quantity,\n      userId: null // A bejelentkezett felhasználó ID-ja majd a backendben beállítódik\n    };\n\n    console.log('Jegyvásárlási kérés (végső próbálkozás):', {\n      endpoint,\n      method: 'POST',\n      payload: finalPayload\n    });\n    // Küldjük el a végső adatokat\n    return this.http.post(endpoint, finalPayload).pipe(catchError(error => {\n      console.error('Részletes vásárlási hiba:', {\n        status: error.status,\n        message: error.message,\n        errorBody: error.error\n      });\n      if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n        console.log('A szerver által jelentett hibák:');\n        error.error.errors.forEach((err, index) => {\n          console.log(`Hiba #${index + 1}:`, err);\n        });\n      }\n      return throwError(() => error);\n    }));\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    const endpoint = `${environment.apiUrl}/tickets/cancel/${ticketId}`;\n    console.log('Jegy lemondása:', endpoint);\n    // Alternatív formátumban próbáljuk a lemondást\n    return this.http.post(endpoint, {\n      ticketId: ticketId\n    });\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryId","quantity","endpoint","apiUrl","simplestPayload","event","Number","payloadWithNamedCategory","category","finalPayload","userId","console","log","method","payload","post","pipe","error","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId: string, categoryId: string, quantity: number): Observable<Ticket> {\n    // Végső próbálkozásként több más formátumot is kipróbálunk\n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // Talán nincs is szükség kategóriára, csak magunk küldjük el a minimális adatokat\n    const simplestPayload = {\n      event: eventId,           // Talán az eseményt 'event' mezőként várja\n      quantity: Number(quantity)\n    };\n\n    // Vagy talán a kategória nevét várja azonosító helyett ('Álló')\n    const payloadWithNamedCategory = {\n      eventId: eventId,\n      category: \"Álló\",     // Használjuk a kategoria nevet ID helyett\n      quantity: quantity\n    };\n    \n    // Végső kísérlet legegyszerűbb formában\n    const finalPayload = {\n      eventId: eventId,\n      // Talán vagy az egyiket vagy a másikat várja\n      category: categoryId,  \n      categoryId: categoryId,\n      // A többi mező\n      quantity,\n      userId: null, // A bejelentkezett felhasználó ID-ja majd a backendben beállítódik\n    };\n    \n    console.log('Jegyvásárlási kérés (végső próbálkozás):', {\n      endpoint,\n      method: 'POST',\n      payload: finalPayload\n    });\n    \n    // Küldjük el a végső adatokat\n    return this.http.post<Ticket>(endpoint, finalPayload)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Részletes vásárlási hiba:', {\n            status: error.status,\n            message: error.message,\n            errorBody: error.error\n          });\n          \n          if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n            console.log('A szerver által jelentett hibák:');\n            error.error.errors.forEach((err: any, index: number) => {\n              console.log(`Hiba #${index + 1}:`, err);\n            });\n          }\n          \n          return throwError(() => error);\n        })\n      );\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    const endpoint = `${environment.apiUrl}/tickets/cancel/${ticketId}`;\n    console.log('Jegy lemondása:', endpoint);\n    // Alternatív formátumban próbáljuk a lemondást\n    return this.http.post<void>(endpoint, {\n      ticketId: ticketId\n    });\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}