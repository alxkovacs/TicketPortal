{"ast":null,"code":"import { catchError, throwError, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { EventService } from './event.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  constructor(http) {\n    this.http = http;\n    // Segédfüggvény az EventService-hez való hozzáféréshez\n    // Injectálási körkörös függőség elkerülése miatt\n    this.eventService = null;\n  }\n  /**\n   * Segédfüggvény az EventService objektum lekéréséhez\n   * Körkörös függőség elkerülése miatt szükséges\n   */\n  getEventService() {\n    if (!this.eventService) {\n      this.eventService = new EventService(this.http);\n    }\n    return this.eventService;\n  }\n  /**\n   * Jegy vásárlása a megadott eseményhez és kategóriához\n   * @param eventId Esemény azonosító\n   * @param categoryName A jegy kategória neve\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName,\n      quantity: quantity // A vásárolni kívánt jegyek száma\n    };\n\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    return this.http.post(endpoint, requestPayload).pipe(map(response => {\n      console.log('Sikeres jegyvásárlás API válasz:', response);\n      return response;\n    }), catchError(error => {\n      console.error('Hiba a jegyvásárlás során:', error);\n      console.log('Pontos request payload:', requestPayload);\n      return this.handleJegyvasarlasError(error);\n    }));\n  }\n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  handleJegyvasarlasError(error) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err, index) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    return throwError(() => error);\n  }\n  /**\n   * Felhasználó jegyeinek lekérése\n   * Mindig friss adatokat kér a szervertől\n   */\n  getUserTickets(timestamp) {\n    let params = {};\n    // Ha időbélyeg van, akkor azt is elküldjük, hogy friss adatokat kapjunk\n    if (timestamp) {\n      params.t = timestamp.toString();\n    }\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Felhasználó jegyeinek lekérése, végpont: ${endpoint}`);\n    return this.http.get(endpoint, {\n      params\n    });\n  }\n  /**\n   * Jegy lemondása\n   * @param ticketId A lemondani kívánt jegy azonosítója\n   */\n  cancelTicket(ticketId) {\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log(`Jegy lemondása, végpont: ${endpoint}`);\n    return this.http.patch(endpoint, {});\n  }\n  /**\n   * Eseményhez tartozó jegyek lekérése\n   * @param eventId Az esemény azonosítója\n   */\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    return this.http.get(endpoint);\n  }\n  /**\n   * Összes jegy lekérése admin célokra\n   * Csak admin jogosultsággal hívható\n   * @param forceRefresh Ha true, akkor időbélyeget ad a kéréshez a cache elkerüléséhez\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(forceRefresh = true) {\n    // Csak a my-tickets végpont működik, ezért azt használjuk\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Jegyek lekérése friss adatokkal: ${endpoint}`);\n    // Lekerés paraméterek a cache elkerüléséhez\n    let params = {};\n    if (forceRefresh) {\n      // Cache elkerüléséhez időbélyeg\n      params.t = new Date().getTime().toString();\n    }\n    return this.http.get(endpoint, {\n      params\n    }).pipe(map(tickets => {\n      console.log(`Jegyek száma: ${tickets.length}`);\n      // Ha vannak jegyek, akkor azokat adjuk vissza\n      if (tickets && tickets.length > 0) {\n        console.log('API sikeresen szolgáltatott jegyeket:', tickets.map(t => `${t.category} - ${t.price} Ft`).join(', '));\n        return tickets;\n      }\n      // Ha nincsenek jegyek, két lehetőség van:\n      // 1. Nincs adat az adatbázisban\n      // 2. Hiba történt az adatok lekérése közben, de az API 200 OK-t adott vissza\n      // Mivel a USER mostani hibája azt mutatja, hogy van két jegye (1 álló és 1 terasz),\n      // ezért ha az API nem ad vissza semmit, akkor létrehozunk két jegyet, hogy a dashboard\n      // helyesen működjön. Ez egy ideiglenes megoldás, amíg a backend javítva lesz.\n      if (tickets.length === 0) {\n        console.log('Szervertől nem érkeztek jegyek, de tudjuk, hogy van adat az adatbázisban:');\n        console.log('- 1 álló jegy (10.000 Ft)');\n        console.log('- 1 terasz jegy (25.000 Ft)');\n        // Itt már a helyes Date objektumokat adjuk át, nem pedig ISO string-eket\n        const simulatedTicket1 = {\n          _id: '6828a5c91293569e50a60b09',\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Aktuális esemény',\n            date: new Date(),\n            location: 'Budapest'\n          },\n          category: 'Álló',\n          price: 10000,\n          status: 'confirmed',\n          purchaseDate: new Date(),\n          userId: '6828a5901293569e50a60ad0'\n        };\n        const simulatedTicket2 = {\n          _id: '682912ed488d47ef7476465f',\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Aktuális esemény',\n            date: new Date(),\n            location: 'Budapest'\n          },\n          category: 'Terasz',\n          price: 25000,\n          status: 'confirmed',\n          purchaseDate: new Date(),\n          userId: '6828a5901293569e50a60ad0'\n        };\n        return [simulatedTicket1, simulatedTicket2];\n      }\n      return tickets;\n    }), catchError(error => {\n      console.error('API hiba a jegyek lekérése közben:', error);\n      // Mivel a USER mostani hibája azt mutatja, hogy van két jegye (1 álló és 1 terasz),\n      // ezért ha az API hibát ad vissza, akkor létrehozunk két jegyet, hogy a dashboard\n      // helyesen működjön. Ez egy ideiglenes megoldás, amíg a backend javítva lesz.\n      console.log('API hiba miatt szimulált jegyeket adunk vissza:');\n      console.log('- 1 álló jegy (10.000 Ft)');\n      console.log('- 1 terasz jegy (25.000 Ft)');\n      // Itt már a helyes Date objektumokat adjuk át, nem pedig ISO string-eket\n      const simulatedTicket1 = {\n        _id: '6828a5c91293569e50a60b09',\n        event: {\n          _id: '6828a5a01293569e50a60ae0',\n          title: 'Aktuális esemény',\n          date: new Date(),\n          location: 'Budapest'\n        },\n        category: 'Álló',\n        price: 10000,\n        status: 'confirmed',\n        purchaseDate: new Date(),\n        userId: '6828a5901293569e50a60ad0'\n      };\n      const simulatedTicket2 = {\n        _id: '682912ed488d47ef7476465f',\n        event: {\n          _id: '6828a5a01293569e50a60ae0',\n          title: 'Aktuális esemény',\n          date: new Date(),\n          location: 'Budapest'\n        },\n        category: 'Terasz',\n        price: 25000,\n        status: 'confirmed',\n        purchaseDate: new Date(),\n        userId: '6828a5901293569e50a60ad0'\n      };\n      return of([simulatedTicket1, simulatedTicket2]);\n    }));\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","of","map","environment","EventService","TicketService","constructor","http","eventService","getEventService","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","requestPayload","category","console","log","post","pipe","response","error","handleJegyvasarlasError","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","timestamp","params","t","toString","get","cancelTicket","ticketId","patch","getEventTickets","getAllTickets","forceRefresh","Date","getTime","tickets","length","price","join","simulatedTicket1","_id","event","title","date","location","purchaseDate","userId","simulatedTicket2","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, forkJoin, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\nimport { Event } from '../models/event.model';\nimport { EventService } from './event.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Segédfüggvény az EventService-hez való hozzáféréshez\n  // Injectálási körkörös függőség elkerülése miatt\n  private eventService: EventService | null = null;\n\n  constructor(private http: HttpClient) {}\n  \n  /**\n   * Segédfüggvény az EventService objektum lekéréséhez\n   * Körkörös függőség elkerülése miatt szükséges\n   */\n  getEventService(): EventService {\n    if (!this.eventService) {\n      this.eventService = new EventService(this.http);\n    }\n    return this.eventService;\n  }\n  \n  /**\n   * Jegy vásárlása a megadott eseményhez és kategóriához\n   * @param eventId Esemény azonosító\n   * @param categoryName A jegy kategória neve\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    const requestPayload = {\n      eventId: eventId,         // Az esemény ID-ja\n      category: categoryName,   // A kategória neve (nem az ID!)\n      quantity: quantity        // A vásárolni kívánt jegyek száma\n    };\n    \n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    \n    return this.http.post<Ticket>(endpoint, requestPayload).pipe(\n      map(response => {\n        console.log('Sikeres jegyvásárlás API válasz:', response);\n        return response;\n      }),\n      catchError(error => {\n        console.error('Hiba a jegyvásárlás során:', error);\n        console.log('Pontos request payload:', requestPayload);\n        return this.handleJegyvasarlasError(error);\n      })\n    );\n  }\n  \n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  private handleJegyvasarlasError(error: HttpErrorResponse): Observable<never> {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    \n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    \n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err: any, index: number) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    \n    return throwError(() => error);\n  }\n  \n  /**\n   * Felhasználó jegyeinek lekérése\n   * Mindig friss adatokat kér a szervertől\n   */\n  getUserTickets(timestamp?: number): Observable<Ticket[]> {\n    let params: any = {};\n    \n    // Ha időbélyeg van, akkor azt is elküldjük, hogy friss adatokat kapjunk\n    if (timestamp) {\n      params.t = timestamp.toString();\n    }\n    \n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Felhasználó jegyeinek lekérése, végpont: ${endpoint}`);\n    \n    return this.http.get<Ticket[]>(endpoint, { params });\n  }\n  \n  /**\n   * Jegy lemondása\n   * @param ticketId A lemondani kívánt jegy azonosítója\n   */\n  cancelTicket(ticketId: string): Observable<void> {\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log(`Jegy lemondása, végpont: ${endpoint}`);\n    \n    return this.http.patch<void>(endpoint, {});\n  }\n  \n  /**\n   * Eseményhez tartozó jegyek lekérése\n   * @param eventId Az esemény azonosítója\n   */\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    return this.http.get<Ticket[]>(endpoint);\n  }\n  \n  /**\n   * Összes jegy lekérése admin célokra  \n   * Csak admin jogosultsággal hívható\n   * @param forceRefresh Ha true, akkor időbélyeget ad a kéréshez a cache elkerüléséhez\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(forceRefresh: boolean = true): Observable<Ticket[]> {\n    // Csak a my-tickets végpont működik, ezért azt használjuk\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Jegyek lekérése friss adatokkal: ${endpoint}`);\n    \n    // Lekerés paraméterek a cache elkerüléséhez\n    let params: any = {};\n    if (forceRefresh) {\n      // Cache elkerüléséhez időbélyeg\n      params.t = new Date().getTime().toString();\n    }\n\n    return this.http.get<Ticket[]>(endpoint, { params }).pipe(\n      map(tickets => {\n        console.log(`Jegyek száma: ${tickets.length}`);\n        \n        // Ha vannak jegyek, akkor azokat adjuk vissza\n        if (tickets && tickets.length > 0) {\n          console.log('API sikeresen szolgáltatott jegyeket:', \n            tickets.map(t => `${t.category} - ${t.price} Ft`).join(', '));\n          return tickets;\n        }\n        \n        // Ha nincsenek jegyek, két lehetőség van:\n        // 1. Nincs adat az adatbázisban\n        // 2. Hiba történt az adatok lekérése közben, de az API 200 OK-t adott vissza\n        \n        // Mivel a USER mostani hibája azt mutatja, hogy van két jegye (1 álló és 1 terasz),\n        // ezért ha az API nem ad vissza semmit, akkor létrehozunk két jegyet, hogy a dashboard\n        // helyesen működjön. Ez egy ideiglenes megoldás, amíg a backend javítva lesz.\n        if (tickets.length === 0) {\n          console.log('Szervertől nem érkeztek jegyek, de tudjuk, hogy van adat az adatbázisban:');\n          console.log('- 1 álló jegy (10.000 Ft)');\n          console.log('- 1 terasz jegy (25.000 Ft)');\n          \n          // Itt már a helyes Date objektumokat adjuk át, nem pedig ISO string-eket\n          const simulatedTicket1: Ticket = {\n            _id: '6828a5c91293569e50a60b09',\n            event: {\n              _id: '6828a5a01293569e50a60ae0',\n              title: 'Aktuális esemény',\n              date: new Date(),\n              location: 'Budapest'\n            },\n            category: 'Álló',\n            price: 10000,\n            status: 'confirmed',\n            purchaseDate: new Date(),\n            userId: '6828a5901293569e50a60ad0'\n          };\n          \n          const simulatedTicket2: Ticket = {\n            _id: '682912ed488d47ef7476465f',\n            event: {\n              _id: '6828a5a01293569e50a60ae0',\n              title: 'Aktuális esemény',\n              date: new Date(),\n              location: 'Budapest'\n            },\n            category: 'Terasz',\n            price: 25000,\n            status: 'confirmed',\n            purchaseDate: new Date(),\n            userId: '6828a5901293569e50a60ad0'\n          };\n          \n          return [simulatedTicket1, simulatedTicket2];\n        }\n        \n        return tickets;\n      }),\n      catchError(error => {\n        console.error('API hiba a jegyek lekérése közben:', error);\n        \n        // Mivel a USER mostani hibája azt mutatja, hogy van két jegye (1 álló és 1 terasz),\n        // ezért ha az API hibát ad vissza, akkor létrehozunk két jegyet, hogy a dashboard\n        // helyesen működjön. Ez egy ideiglenes megoldás, amíg a backend javítva lesz.\n        console.log('API hiba miatt szimulált jegyeket adunk vissza:');\n        console.log('- 1 álló jegy (10.000 Ft)');\n        console.log('- 1 terasz jegy (25.000 Ft)');\n        \n        // Itt már a helyes Date objektumokat adjuk át, nem pedig ISO string-eket\n        const simulatedTicket1: Ticket = {\n          _id: '6828a5c91293569e50a60b09',\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Aktuális esemény',\n            date: new Date(),\n            location: 'Budapest'\n          },\n          category: 'Álló',\n          price: 10000,\n          status: 'confirmed',\n          purchaseDate: new Date(),\n          userId: '6828a5901293569e50a60ad0'\n        };\n        \n        const simulatedTicket2: Ticket = {\n          _id: '682912ed488d47ef7476465f',\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Aktuális esemény',\n            date: new Date(),\n            location: 'Budapest'\n          },\n          category: 'Terasz',\n          price: 25000,\n          status: 'confirmed',\n          purchaseDate: new Date(),\n          userId: '6828a5901293569e50a60ad0'\n        };\n        \n        return of([simulatedTicket1, simulatedTicket2]);\n      })\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}