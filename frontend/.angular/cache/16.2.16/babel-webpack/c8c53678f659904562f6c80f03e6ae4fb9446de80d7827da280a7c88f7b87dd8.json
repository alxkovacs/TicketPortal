{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend a kategória NEVÉT várja, nem az azonosítóját!\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // Biztosítsuk, hogy a quantity szám legyen és minimum 1\n    const safeQuantity = Math.max(1, Number(quantity) || 1);\n    // A backend által várt helyes formátum\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName,\n      quantity: safeQuantity // A mennyiség számként konvertálva és biztosítva\n    };\n    // Részletes naplózás a kérésről\n    console.log('Jegyvásárlási kérés részletei:', {\n      url: endpoint,\n      eventId,\n      categoryName,\n      originalQuantity: quantity,\n      safeQuantity,\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      payload: requestPayload\n    });\n    // HTTP fejlécek beállítása\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n    console.log('Jegyvásárlás végleges kérés adatok:', {\n      url: endpoint,\n      method: 'POST',\n      headers: httpOptions.headers,\n      payload: requestPayload\n    });\n    // Kérés indítása explicit fejlécekkel és részletes hibakezeléssel\n    return this.http.post(endpoint, requestPayload, httpOptions).pipe(catchError(error => {\n      console.error('Jegyvásárlási hiba részletei:', {\n        statusCode: error.status,\n        statusText: error.statusText,\n        message: error.message,\n        errorBody: error.error,\n        url: error.url,\n        headers: error.headers\n      });\n      // Speciális hibakezelés az értékeiknek megfelelően\n      if (error.status === 401 || error.status === 403) {\n        console.error('Autentikációs hiba: Nem jogosult a jegyvásárláshoz vagy lejárt a token.');\n        // Lehetne itt automatikus kiléptetést és újra bejelentkezést implementálni\n      }\n\n      if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n        console.log('A szerver által jelentett validációs hibák:');\n        error.error.errors.forEach((err, index) => {\n          console.log(`Hiba #${index + 1}:`, err);\n        });\n      }\n      return throwError(() => error);\n    }));\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","catchError","throwError","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","safeQuantity","Math","max","Number","requestPayload","category","console","log","url","originalQuantity","headers","payload","httpOptions","method","post","pipe","error","statusCode","status","statusText","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse, HttpHeaders } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend a kategória NEVÉT várja, nem az azonosítóját!\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // Biztosítsuk, hogy a quantity szám legyen és minimum 1\n    const safeQuantity = Math.max(1, Number(quantity) || 1);\n    \n    // A backend által várt helyes formátum\n    const requestPayload = {\n      eventId: eventId,         // Ez kell, az esemény ID-ja\n      category: categoryName,   // A kategória neve, pl. 'Álló' vagy 'Terasz'\n      quantity: safeQuantity    // A mennyiség számként konvertálva és biztosítva\n    };\n    \n    // Részletes naplózás a kérésről\n    console.log('Jegyvásárlási kérés részletei:', {\n      url: endpoint,\n      eventId,\n      categoryName,\n      originalQuantity: quantity,\n      safeQuantity,\n      headers: { 'Content-Type': 'application/json' },\n      payload: requestPayload\n    });\n    \n    // HTTP fejlécek beállítása\n    const httpOptions = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Accept': 'application/json'\n      })\n    };\n    \n    console.log('Jegyvásárlás végleges kérés adatok:', {\n      url: endpoint,\n      method: 'POST',\n      headers: httpOptions.headers,\n      payload: requestPayload\n    });\n    \n    // Kérés indítása explicit fejlécekkel és részletes hibakezeléssel\n    return this.http.post<Ticket>(endpoint, requestPayload, httpOptions)\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Jegyvásárlási hiba részletei:', {\n            statusCode: error.status,\n            statusText: error.statusText,\n            message: error.message,\n            errorBody: error.error,\n            url: error.url,\n            headers: error.headers\n          });\n          \n          // Speciális hibakezelés az értékeiknek megfelelően\n          if (error.status === 401 || error.status === 403) {\n            console.error('Autentikációs hiba: Nem jogosult a jegyvásárláshoz vagy lejárt a token.');\n            // Lehetne itt automatikus kiléptetést és újra bejelentkezést implementálni\n          }\n          \n          if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n            console.log('A szerver által jelentett validációs hibák:');\n            error.error.errors.forEach((err: any, index: number) => {\n              console.log(`Hiba #${index + 1}:`, err);\n            });\n          }\n          \n          return throwError(() => error);\n        })\n      );\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}