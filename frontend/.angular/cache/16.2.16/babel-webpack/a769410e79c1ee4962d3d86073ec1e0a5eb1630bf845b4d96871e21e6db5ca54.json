{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  logout() {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n  }\n  isAuthenticated() {\n    return this.currentUserSubject.value !== null;\n  }\n  getUserRole() {\n    return this.currentUserSubject.value?.role || null;\n  }\n  isAdmin() {\n    try {\n      // Közvetlenül a localStorage-ban lévő 'user' kulcsot ellenőrizzük, amit valóban látunk a böngészőben\n      const userString = localStorage.getItem('user');\n      console.log('user kulcs tartalma a localStorage-ban:', userString);\n      if (userString) {\n        try {\n          const userData = JSON.parse(userString);\n          console.log('Bejelentkezeti felhasználó adatai:', userData);\n          // Ellenőrizzük, hogy van-e role mező és az 'admin'-e\n          if (userData && userData.role) {\n            const isAdminUser = userData.role === 'admin';\n            console.log(`Felhasználó szerepköre: ${userData.role}, admin jogosultság: ${isAdminUser}`);\n            return isAdminUser;\n          }\n        } catch (e) {\n          console.error('Hiba a felhasználói adatok feldolgozása közben:', e);\n        }\n      } else {\n        console.log('Nincs user kulcs a localStorage-ban');\n      }\n      // Közvetlenül kifejezett kövés, ha a felhasználó email címe admin@admin.com\n      const emailBasedCheck = this.getCurrentUser()?.email === 'admin@admin.com';\n      if (emailBasedCheck) {\n        console.log('Email alapú admin ellenőrzés sikeres!');\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('Hiba az admin jogosultság ellenőrzése közben:', error);\n      return false;\n    }\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","register","userData","post","pipe","user","setItem","stringify","login","credentials","logout","removeItem","isAuthenticated","value","getUserRole","role","isAdmin","userString","console","log","isAdminUser","e","error","emailBasedCheck","getCurrentUser","email","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n\n  register(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/register`, userData)\n      .pipe(tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      }));\n  }\n\n  login(credentials: { email: string; password: string }): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/login`, credentials).pipe(\n      tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      })\n    );\n  }\n\n  logout(): void {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n  }\n\n  isAuthenticated(): boolean {\n    return this.currentUserSubject.value !== null;\n  }\n\n  getUserRole(): string | null {\n    return this.currentUserSubject.value?.role || null;\n  }\n\n  isAdmin(): boolean {\n    try {\n      // Közvetlenül a localStorage-ban lévő 'user' kulcsot ellenőrizzük, amit valóban látunk a böngészőben\n      const userString = localStorage.getItem('user');\n      console.log('user kulcs tartalma a localStorage-ban:', userString);\n\n      if (userString) {\n        try {\n          const userData = JSON.parse(userString);\n          console.log('Bejelentkezeti felhasználó adatai:', userData);  \n          \n          // Ellenőrizzük, hogy van-e role mező és az 'admin'-e\n          if (userData && userData.role) {\n            const isAdminUser = userData.role === 'admin';\n            console.log(`Felhasználó szerepköre: ${userData.role}, admin jogosultság: ${isAdminUser}`);\n            return isAdminUser;\n          }\n        } catch (e) {\n          console.error('Hiba a felhasználói adatok feldolgozása közben:', e);\n        }\n      } else {\n        console.log('Nincs user kulcs a localStorage-ban');\n      }\n      \n      // Közvetlenül kifejezett kövés, ha a felhasználó email címe admin@admin.com\n      const emailBasedCheck = this.getCurrentUser()?.email === 'admin@admin.com';\n      if (emailBasedCheck) {\n        console.log('Email alapú admin ellenőrzés sikeres!');\n        return true;\n      }\n      \n      return false;\n    } catch (error) {\n      console.error('Hiba az admin jogosultság ellenőrzése közben:', error);\n      return false;\n    }\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}