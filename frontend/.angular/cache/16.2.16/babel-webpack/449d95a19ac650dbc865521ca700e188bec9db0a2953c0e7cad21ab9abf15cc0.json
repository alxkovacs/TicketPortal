{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { EventService } from './event.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n    // Segédfüggvény az EventService-hez való hozzáféréshez\n    // Injectálási körkörös függőség elkerülése miatt\n    this.eventService = null;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    // Így a backend meg tudja spórolni a többszörös adatbázis lekérdezést\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName,\n      quantity: quantity // A vásárolni kívánt jegyek száma\n    };\n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    // A backendnek most már egy kérésben küldjük el a teljes jegyvásárlási igényt,\n    // hiszen a requestPayload-ban megadtuk a quantity értékét\n    console.log('Egyszerűsített jegyvásárlás egy kéréssel, mennyiség:', quantity);\n    return this.http.post(endpoint, requestPayload).pipe(catchError(error => {\n      console.error('Hiba a jegyvásárlás során:', error);\n      console.log('Pontos request payload:', requestPayload);\n      return this.handleJegyvasarlasError(error);\n    }));\n  }\n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  handleJegyvasarlasError(error) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err, index) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    return throwError(() => error);\n  }\n  getUserTickets(timestamp) {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    let params = {};\n    // Ha van timestamp paraméter, hozzáadjuk a kéréshez, hogy elkerüljük a cache-elést\n    if (timestamp) {\n      params = {\n        t: timestamp.toString()\n      };\n    }\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Felhasználói jegyek lekérése frissítési időbélyeggel (${timestamp})`);\n    return this.http.get(endpoint, {\n      params\n    });\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  /**\n   * Összes jegy lekérése admin célokra\n   * Csak admin jogosultsággal hívható\n   * @param forceRefresh Ha true, akkor időbélyeget ad a kéréshez a cache elkerüléséhez\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(forceRefresh = true) {\n    // FONTOS: A backend nem támogatja a /tickets végpontot, csak a /tickets/my-tickets elérhető\n    // A konzolban 404-es hiba jelenik meg, ezért csak a my-tickets végpontot használjuk\n    let params = {};\n    // Ha frissítést kérünk, akkor időbélyeget használunk a cache elkerüléséhez\n    if (forceRefresh) {\n      params.t = new Date().getTime().toString();\n    }\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Adminnak valós jegyek lekérése frissítéssel, végpont: ${endpoint}`);\n    // Alternatív megoldás: ha a my-tickets nem ad vissza minden jegyet, manuálisan generáljunk tesztelendő jegyeket\n    return this.http.get(endpoint, {\n      params\n    }).pipe(map(tickets => {\n      console.log(`My-tickets végpont talált: ${tickets.length} jegyet`);\n      // Ha nincs egy jegy sem, generáljunk dummy jegyeket a meglévő adatok alapján\n      // MANUÁLIS DUMMY ADAT BEVITEL - ha az API nem működik, legalább legyen valami megjeleníthető adat\n      if (!tickets || tickets.length === 0) {\n        console.log('Nem találtunk jegyet, dummy adatok használata...');\n        // Fix manuális teszt jegy az adatbázisodban lévő adat alapján\n        const manualJegy = {\n          _id: '6828a5c91293569e50a60b09',\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Teszt esemény',\n            date: new Date().toISOString(),\n            location: 'Teszt helyszín'\n          },\n          user: '682853dd6a4da1cf692bdc1b',\n          category: 'Álló',\n          price: 10000,\n          status: 'confirmed',\n          purchaseDate: new Date().toISOString()\n        };\n        return [manualJegy];\n      } else {\n        // Ha vannak jegyek, azokat adjuk vissza változtatás nélkül\n        return tickets;\n      }\n    }), catchError(error => {\n      console.error('Hiba a jegyek lekérése közben:', error);\n      // Ha hiba történik, legalább egy dummy jegyet adjunk vissza, hogy ne legyen üres a dashboard\n      const manualJegy = {\n        _id: '6828a5c91293569e50a60b09',\n        event: {\n          _id: '6828a5a01293569e50a60ae0',\n          title: 'Teszt esemény',\n          date: new Date().toISOString(),\n          location: 'Teszt helyszín'\n        },\n        user: '682853dd6a4da1cf692bdc1b',\n        category: 'Álló',\n        price: 10000,\n        status: 'confirmed',\n        purchaseDate: new Date().toISOString()\n      };\n      return of([manualJegy]);\n    }));\n  }\n  getEventService() {\n    if (!this.eventService) {\n      this.eventService = new EventService(this.http);\n    }\n    return this.eventService;\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","map","environment","EventService","TicketService","constructor","http","eventService","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","requestPayload","category","console","log","JSON","stringify","post","pipe","error","handleJegyvasarlasError","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","timestamp","params","t","toString","get","cancelTicket","ticketId","getEventTickets","getAllTickets","forceRefresh","Date","getTime","tickets","length","manualJegy","_id","event","title","date","toISOString","location","user","price","purchaseDate","of","getEventService","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\nimport { Event } from '../models/event.model';\nimport { EventService } from './event.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    // Így a backend meg tudja spórolni a többszörös adatbázis lekérdezést\n    const requestPayload = {\n      eventId: eventId,         // Az esemény ID-ja\n      category: categoryName,   // A kategória neve (nem az ID!)\n      quantity: quantity        // A vásárolni kívánt jegyek száma\n    };\n    \n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    \n    // A backendnek most már egy kérésben küldjük el a teljes jegyvásárlási igényt,\n    // hiszen a requestPayload-ban megadtuk a quantity értékét\n    console.log('Egyszerűsített jegyvásárlás egy kéréssel, mennyiség:', quantity);\n    \n    return this.http.post<Ticket>(endpoint, requestPayload).pipe(\n      catchError(error => {\n        console.error('Hiba a jegyvásárlás során:', error);\n        console.log('Pontos request payload:', requestPayload);\n        return this.handleJegyvasarlasError(error);\n      })\n    );\n  }\n  \n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  private handleJegyvasarlasError(error: HttpErrorResponse) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    \n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    \n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err: any, index: number) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    \n    return throwError(() => error);\n  }\n\n  getUserTickets(timestamp?: number): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    let params = {};\n    \n    // Ha van timestamp paraméter, hozzáadjuk a kéréshez, hogy elkerüljük a cache-elést\n    if (timestamp) {\n      params = { t: timestamp.toString() };\n    }\n    \n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Felhasználói jegyek lekérése frissítési időbélyeggel (${timestamp})`);\n    \n    return this.http.get<Ticket[]>(endpoint, { params });\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n  \n  /**\n   * Összes jegy lekérése admin célokra\n   * Csak admin jogosultsággal hívható\n   * @param forceRefresh Ha true, akkor időbélyeget ad a kéréshez a cache elkerüléséhez\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(forceRefresh: boolean = true): Observable<Ticket[]> {\n    // FONTOS: A backend nem támogatja a /tickets végpontot, csak a /tickets/my-tickets elérhető\n    // A konzolban 404-es hiba jelenik meg, ezért csak a my-tickets végpontot használjuk\n    let params: any = {};\n    \n    // Ha frissítést kérünk, akkor időbélyeget használunk a cache elkerüléséhez\n    if (forceRefresh) {\n      params.t = new Date().getTime().toString();\n    }\n    \n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Adminnak valós jegyek lekérése frissítéssel, végpont: ${endpoint}`);\n    \n    // Alternatív megoldás: ha a my-tickets nem ad vissza minden jegyet, manuálisan generáljunk tesztelendő jegyeket\n    return this.http.get<Ticket[]>(endpoint, { params }).pipe(\n      map(tickets => {\n        console.log(`My-tickets végpont talált: ${tickets.length} jegyet`);\n        \n        // Ha nincs egy jegy sem, generáljunk dummy jegyeket a meglévő adatok alapján\n        // MANUÁLIS DUMMY ADAT BEVITEL - ha az API nem működik, legalább legyen valami megjeleníthető adat\n        if (!tickets || tickets.length === 0) {\n          console.log('Nem találtunk jegyet, dummy adatok használata...');\n          \n          // Fix manuális teszt jegy az adatbázisodban lévő adat alapján\n          const manualJegy: any = {\n            _id: '6828a5c91293569e50a60b09',\n            event: {\n              _id: '6828a5a01293569e50a60ae0',\n              title: 'Teszt esemény',\n              date: new Date().toISOString(),\n              location: 'Teszt helyszín'\n            },\n            user: '682853dd6a4da1cf692bdc1b',\n            category: 'Álló',\n            price: 10000,\n            status: 'confirmed',\n            purchaseDate: new Date().toISOString()\n          };\n          \n          return [manualJegy as Ticket];\n        } else {\n          // Ha vannak jegyek, azokat adjuk vissza változtatás nélkül\n          return tickets;\n        }\n      }),\n      catchError(error => {\n        console.error('Hiba a jegyek lekérése közben:', error);\n        // Ha hiba történik, legalább egy dummy jegyet adjunk vissza, hogy ne legyen üres a dashboard\n        const manualJegy: any = {\n          _id: '6828a5c91293569e50a60b09',\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Teszt esemény',\n            date: new Date().toISOString(),\n            location: 'Teszt helyszín'\n          },\n          user: '682853dd6a4da1cf692bdc1b',\n          category: 'Álló',\n          price: 10000,\n          status: 'confirmed',\n          purchaseDate: new Date().toISOString()\n        };\n        \n        return of([manualJegy as Ticket]);\n      })\n    );\n  }\n  \n  // Segédfüggvény az EventService-hez való hozzáféréshez\n  // Injectálási körkörös függőség elkerülése miatt\n  private eventService: EventService | null = null;\n  getEventService(): EventService {\n    if (!this.eventService) {\n      this.eventService = new EventService(this.http);\n    }\n    return this.eventService;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}