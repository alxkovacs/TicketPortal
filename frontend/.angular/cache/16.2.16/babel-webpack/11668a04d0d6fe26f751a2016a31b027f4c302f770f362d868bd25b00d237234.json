{"ast":null,"code":"import { catchError, throwError, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // A backend által várt pontos formátum a szerver hiba elkerüléséhez\n    // Fontos! A quantity paramétert ki kell hagyni, a backend nem kezeli jól a többszörös jegyvásárlást.\n    // A tesztelésnél 500-as hibát kapunk, ha beküldenk a quantity-t\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName // A backend a kategória nevét várja, nem az ID-t!\n    };\n    // Ha több jegyet szeretnénk vásárolni, akkor többször küldjük el a kérést\n    const purchaseRequests = [];\n    for (let i = 0; i < quantity; i++) {\n      purchaseRequests.push(this.http.post(endpoint, requestPayload));\n    }\n    console.log('Jegyvásárlási kérés(ek), mennyiség:', quantity, {\n      endpoint,\n      method: 'POST',\n      payload: requestPayload\n    });\n    // Ha csak egy jegyet kell vásárolni, egyszerűbb a logika\n    if (quantity === 1) {\n      return this.http.post(endpoint, requestPayload).pipe(catchError(this.handleJegyvasarlasError));\n    }\n    // Ha több jegyet vásárolunk, használjuk a forkJoin operátort\n    // hogy egyszerre küldjük el a kéréseket és várjuk meg az összes választ\n    return forkJoin(purchaseRequests).pipe(\n    // A forkJoin tömböt ad vissza, de nekünk csak az első elem kell\n    map(tickets => tickets[0]), catchError(this.handleJegyvasarlasError));\n  }\n  handleJegyvasarlasError(error) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err, index) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    return throwError(() => error);\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","forkJoin","map","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","requestPayload","category","purchaseRequests","i","push","post","console","log","method","payload","pipe","handleJegyvasarlasError","tickets","error","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // A backend által várt pontos formátum a szerver hiba elkerüléséhez\n    // Fontos! A quantity paramétert ki kell hagyni, a backend nem kezeli jól a többszörös jegyvásárlást.\n    // A tesztelésnél 500-as hibát kapunk, ha beküldenk a quantity-t\n    const requestPayload = {\n      eventId: eventId,       // Ez kell, az esemény ID-ja\n      category: categoryName, // A backend a kategória nevét várja, nem az ID-t!\n    };\n    \n    // Ha több jegyet szeretnénk vásárolni, akkor többször küldjük el a kérést\n    const purchaseRequests: Observable<Ticket>[] = [];\n    \n    for (let i = 0; i < quantity; i++) {\n      purchaseRequests.push(\n        this.http.post<Ticket>(endpoint, requestPayload)\n      );\n    }\n    \n    console.log('Jegyvásárlási kérés(ek), mennyiség:', quantity, {\n      endpoint,\n      method: 'POST',\n      payload: requestPayload\n    });\n    \n    // Ha csak egy jegyet kell vásárolni, egyszerűbb a logika\n    if (quantity === 1) {\n      return this.http.post<Ticket>(endpoint, requestPayload)\n        .pipe(\n          catchError(this.handleJegyvasarlasError)\n        );\n    }\n    \n    // Ha több jegyet vásárolunk, használjuk a forkJoin operátort\n    // hogy egyszerre küldjük el a kéréseket és várjuk meg az összes választ\n    return forkJoin(purchaseRequests).pipe(\n      // A forkJoin tömböt ad vissza, de nekünk csak az első elem kell\n      map(tickets => tickets[0]),\n      catchError(this.handleJegyvasarlasError)\n    );\n  }\n  \n  private handleJegyvasarlasError(error: HttpErrorResponse) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    \n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err: any, index: number) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    \n    return throwError(() => error);\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,MAAM;AACnE,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,aAAa;EACxB;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvC;;;;;;EAMAC,cAAcA,CAACC,OAAe,EAAEC,YAAoB,EAAEC,QAAgB;IACpE;IACA;IACA;IAEA,MAAMC,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,UAAU;IAEhD;IACA;IACA;IACA,MAAMC,cAAc,GAAG;MACrBL,OAAO,EAAEA,OAAO;MAChBM,QAAQ,EAAEL,YAAY,CAAE;KACzB;IAED;IACA,MAAMM,gBAAgB,GAAyB,EAAE;IAEjD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGN,QAAQ,EAAEM,CAAC,EAAE,EAAE;MACjCD,gBAAgB,CAACE,IAAI,CACnB,IAAI,CAACX,IAAI,CAACY,IAAI,CAASP,QAAQ,EAAEE,cAAc,CAAC,CACjD;;IAGHM,OAAO,CAACC,GAAG,CAAC,qCAAqC,EAAEV,QAAQ,EAAE;MAC3DC,QAAQ;MACRU,MAAM,EAAE,MAAM;MACdC,OAAO,EAAET;KACV,CAAC;IAEF;IACA,IAAIH,QAAQ,KAAK,CAAC,EAAE;MAClB,OAAO,IAAI,CAACJ,IAAI,CAACY,IAAI,CAASP,QAAQ,EAAEE,cAAc,CAAC,CACpDU,IAAI,CACHxB,UAAU,CAAC,IAAI,CAACyB,uBAAuB,CAAC,CACzC;;IAGL;IACA;IACA,OAAOvB,QAAQ,CAACc,gBAAgB,CAAC,CAACQ,IAAI;IACpC;IACArB,GAAG,CAACuB,OAAO,IAAIA,OAAO,CAAC,CAAC,CAAC,CAAC,EAC1B1B,UAAU,CAAC,IAAI,CAACyB,uBAAuB,CAAC,CACzC;EACH;EAEQA,uBAAuBA,CAACE,KAAwB;IACtDP,OAAO,CAACO,KAAK,CAAC,2BAA2B,EAAE;MACzCC,MAAM,EAAED,KAAK,CAACC,MAAM;MACpBC,OAAO,EAAEF,KAAK,CAACE,OAAO;MACtBC,SAAS,EAAEH,KAAK,CAACA;KAClB,CAAC;IAEF,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACI,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACN,KAAK,CAACA,KAAK,CAACI,MAAM,CAAC,EAAE;MAC1EX,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/CM,KAAK,CAACA,KAAK,CAACI,MAAM,CAACG,OAAO,CAAC,CAACC,GAAQ,EAAEC,KAAa,KAAI;QACrDhB,OAAO,CAACC,GAAG,CAAC,SAASe,KAAK,GAAG,CAAC,GAAG,EAAED,GAAG,CAAC;MACzC,CAAC,CAAC;;IAGJ,OAAOlC,UAAU,CAAC,MAAM0B,KAAK,CAAC;EAChC;EAEAU,cAAcA,CAAA;IACZ;IACA;IACA,MAAMzB,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,qBAAqB;IAC3DO,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAET,QAAQ,CAAC;IAEtD,OAAO,IAAI,CAACL,IAAI,CAAC+B,GAAG,CAAW1B,QAAQ,CAAC;EAC1C;EAEA2B,YAAYA,CAACC,QAAgB;IAC3B;IACA,MAAM5B,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,YAAY2B,QAAQ,SAAS;IACnEpB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAET,QAAQ,CAAC;IAE3D;IACA,OAAO,IAAI,CAACL,IAAI,CAACY,IAAI,CAAOP,QAAQ,EAAE,EAAE,CAAC;EAC3C;EAEA6B,eAAeA,CAAChC,OAAe;IAC7B,MAAMG,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,kBAAkBJ,OAAO,EAAE;IACjEW,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAET,QAAQ,CAAC;IAChD,OAAO,IAAI,CAACL,IAAI,CAAC+B,GAAG,CAAW1B,QAAQ,CAAC;EAC1C;;;uBAlGWP,aAAa,EAAAqC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbxC,aAAa;MAAAyC,OAAA,EAAbzC,aAAa,CAAA0C,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}