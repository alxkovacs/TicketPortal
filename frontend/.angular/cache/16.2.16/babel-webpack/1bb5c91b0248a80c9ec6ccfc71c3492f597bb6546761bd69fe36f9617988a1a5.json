{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(user => {\n      // Debug, miért nem történik bejelentkezés\n      console.log('Bejelentkezés sikeres, kapott adatok:', user);\n      // A kapott felhasználó adatait tároljuk a state-ben\n      this.currentUserSubject.next(user);\n      // Mindkét kulcs alatt tároljuk a nagyobb kompatibilitás érdekében\n      localStorage.setItem('currentUser', JSON.stringify(user));\n      localStorage.setItem('user', JSON.stringify(user));\n      // Ha van token, azt is tároljuk külön\n      if (user && user.token) {\n        localStorage.setItem('token', user.token);\n      }\n      console.log('Felhasználói adatok elmentve a localStorage-ba');\n    }));\n  }\n  logout() {\n    // Nullázzuk a bejelentkezett felhasználó objektumát\n    this.currentUserSubject.next(null);\n    // Minden kapcsolódó kulcsot töröljünk a localStorage-ból\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    console.log('Kijelentkezés sikeres, felhasználói adatok törölve a localStorage-ból');\n  }\n  isAuthenticated() {\n    return this.currentUserSubject.value !== null;\n  }\n  getUserRole() {\n    return this.currentUserSubject.value?.role || null;\n  }\n  isAdmin() {\n    try {\n      console.log('isAdmin ellenőrzés kezdése...');\n      // A currentUserSubject-ből közvetlenül ellenőrizzük\n      const currentUser = this.currentUserSubject.value;\n      if (currentUser && currentUser.role) {\n        const roleBasedCheck = currentUser.role.toLowerCase() === 'admin';\n        console.log(`Felhasználó szerepköre (currentUserSubject): ${currentUser.role}, admin: ${roleBasedCheck}`);\n        if (roleBasedCheck) return true;\n      }\n      // Ha a felhasználói objektum nincs a memóriában, próbáljuk a localStorage-ból (mindkét kulcsot)\n      let userObject = null;\n      // Először a 'user' kulcsot próbáljuk\n      const userString = localStorage.getItem('user');\n      if (userString) {\n        userObject = JSON.parse(userString);\n        console.log('Felhasználói adatok a \"user\" kulcs alatt:', userObject);\n      } else {\n        // Ha nincs user, akkor a currentUser-t próbáljuk\n        const currentUserString = localStorage.getItem('currentUser');\n        if (currentUserString) {\n          userObject = JSON.parse(currentUserString);\n          console.log('Felhasználói adatok a \"currentUser\" kulcs alatt:', userObject);\n        }\n      }\n      // Ha találtunk felhasználói objektumot, ellenőrizzük a role mezőt\n      if (userObject && userObject.role) {\n        const roleBasedCheck = userObject.role.toLowerCase() === 'admin';\n        console.log(`Felhasználó szerepköre (localStorage): ${userObject.role}, admin: ${roleBasedCheck}`);\n        if (roleBasedCheck) return true;\n      }\n      // Végső lehetőségként, ha a felhasználó email címe admin@admin.com, akkor is admin\n      if (currentUser && currentUser.email === 'admin@admin.com' || userObject && userObject.email === 'admin@admin.com') {\n        console.log('Email-alapú admin ellenőrzés sikeres! (admin@admin.com)');\n        return true;\n      }\n      // Ha minden ellenőrzés sikertelen\n      console.log('Nem találtunk admin jogosultságot egyik módszerrel sem.');\n      return false;\n    } catch (error) {\n      console.error('Hiba az admin jogosultság ellenőrzése közben:', error);\n      return false;\n    }\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","register","userData","post","pipe","user","setItem","stringify","login","credentials","console","log","token","logout","removeItem","isAuthenticated","value","getUserRole","role","isAdmin","currentUser","roleBasedCheck","toLowerCase","userObject","userString","currentUserString","email","error","getCurrentUser","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n\n  register(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/register`, userData)\n      .pipe(tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      }));\n  }\n\n  login(credentials: { email: string; password: string }): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/login`, credentials).pipe(\n      tap(user => {\n        // Debug, miért nem történik bejelentkezés\n        console.log('Bejelentkezés sikeres, kapott adatok:', user);\n\n        // A kapott felhasználó adatait tároljuk a state-ben\n        this.currentUserSubject.next(user);\n        \n        // Mindkét kulcs alatt tároljuk a nagyobb kompatibilitás érdekében\n        localStorage.setItem('currentUser', JSON.stringify(user));\n        localStorage.setItem('user', JSON.stringify(user));\n        \n        // Ha van token, azt is tároljuk külön\n        if (user && user.token) {\n          localStorage.setItem('token', user.token);\n        }\n        \n        console.log('Felhasználói adatok elmentve a localStorage-ba');\n      })\n    );\n  }\n\n  logout(): void {\n    // Nullázzuk a bejelentkezett felhasználó objektumát\n    this.currentUserSubject.next(null);\n    \n    // Minden kapcsolódó kulcsot töröljünk a localStorage-ból\n    localStorage.removeItem('currentUser');\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n    \n    console.log('Kijelentkezés sikeres, felhasználói adatok törölve a localStorage-ból');\n  }\n\n  isAuthenticated(): boolean {\n    return this.currentUserSubject.value !== null;\n  }\n\n  getUserRole(): string | null {\n    return this.currentUserSubject.value?.role || null;\n  }\n\n  isAdmin(): boolean {\n    try {\n      console.log('isAdmin ellenőrzés kezdése...');\n      \n      // A currentUserSubject-ből közvetlenül ellenőrizzük\n      const currentUser = this.currentUserSubject.value;\n      if (currentUser && currentUser.role) {\n        const roleBasedCheck = currentUser.role.toLowerCase() === 'admin';\n        console.log(`Felhasználó szerepköre (currentUserSubject): ${currentUser.role}, admin: ${roleBasedCheck}`);\n        if (roleBasedCheck) return true;\n      }\n\n      // Ha a felhasználói objektum nincs a memóriában, próbáljuk a localStorage-ból (mindkét kulcsot)\n      let userObject = null;\n      \n      // Először a 'user' kulcsot próbáljuk\n      const userString = localStorage.getItem('user');\n      if (userString) {\n        userObject = JSON.parse(userString);\n        console.log('Felhasználói adatok a \"user\" kulcs alatt:', userObject);\n      } else {\n        // Ha nincs user, akkor a currentUser-t próbáljuk\n        const currentUserString = localStorage.getItem('currentUser');\n        if (currentUserString) {\n          userObject = JSON.parse(currentUserString);\n          console.log('Felhasználói adatok a \"currentUser\" kulcs alatt:', userObject);\n        }\n      }\n      \n      // Ha találtunk felhasználói objektumot, ellenőrizzük a role mezőt\n      if (userObject && userObject.role) {\n        const roleBasedCheck = userObject.role.toLowerCase() === 'admin';\n        console.log(`Felhasználó szerepköre (localStorage): ${userObject.role}, admin: ${roleBasedCheck}`);\n        if (roleBasedCheck) return true;\n      }\n      \n      // Végső lehetőségként, ha a felhasználó email címe admin@admin.com, akkor is admin\n      if ((currentUser && currentUser.email === 'admin@admin.com') || \n          (userObject && userObject.email === 'admin@admin.com')) {\n        console.log('Email-alapú admin ellenőrzés sikeres! (admin@admin.com)');\n        return true;\n      }\n      \n      // Ha minden ellenőrzés sikertelen\n      console.log('Nem találtunk admin jogosultságot egyik módszerrel sem.');\n      return false;\n    } catch (error) {\n      console.error('Hiba az admin jogosultság ellenőrzése közben:', error);\n      return false;\n    }\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}