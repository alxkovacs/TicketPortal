{"ast":null,"code":"import { catchError, throwError, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { EventService } from './event.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n    // Ez lesz a belső számoló a vásárolt jegyekhez, mivel a backend API nem mindig működik megbízhatóan\n    this.purchasedTicketCount = 0;\n    this.ticketPrice = 10000; // Ft\n    // Segédfüggvény az EventService-hez való hozzáféréshez\n    // Injectálási körkörös függőség elkerülése miatt\n    this.eventService = null;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    // Így a backend meg tudja spórolni a többszörös adatbázis lekérdezést\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName,\n      quantity: quantity // A vásárolni kívánt jegyek száma\n    };\n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    // A backendnek most már egy kérésben küldjük el a teljes jegyvásárlási igényt,\n    // hiszen a requestPayload-ban megadtuk a quantity értékét\n    console.log('Egyszerűsített jegyvásárlás egy kéréssel, mennyiség:', quantity);\n    // Növeljük a jegyszámlálót, hogy a live adatok frissüljenek\n    this.purchasedTicketCount += quantity;\n    localStorage.setItem('ticketsPurchased', this.purchasedTicketCount.toString());\n    console.log(`Jegyszámláló növelve: ${this.purchasedTicketCount}`);\n    return this.http.post(endpoint, requestPayload).pipe(map(response => {\n      // Sikeres jegyvásárlás után is növeljük a számlálót\n      console.log('Sikeres jegyvásárlás API válasz:', response);\n      return response;\n    }), catchError(error => {\n      console.error('Hiba a jegyvásárlás során:', error);\n      console.log('Pontos request payload:', requestPayload);\n      // Hiba esetén is megtartjuk a számláló növekedést, mert valószínűleg a jegy létrejött, csak\n      // a backend valamilyen rejélyes hibát adott vissza.\n      return this.handleJegyvasarlasError(error);\n    }));\n  }\n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  handleJegyvasarlasError(error) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err, index) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    return throwError(() => error);\n  }\n  getUserTickets(timestamp) {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    let params = {};\n    // Ha van timestamp paraméter, hozzáadjuk a kéréshez, hogy elkerüljük a cache-elést\n    if (timestamp) {\n      params = {\n        t: timestamp.toString()\n      };\n    }\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Felhasználói jegyek lekérése frissítési időbélyeggel (${timestamp})`);\n    return this.http.get(endpoint, {\n      params\n    });\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  /**\n   * Összes jegy lekérése admin célokra\n   * Csak admin jogosultsággal hívható\n   * @param forceRefresh Ha true, akkor időbélyeget ad a kéréshez a cache elkerüléséhez\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(forceRefresh = true) {\n    // Első lépés: próbáljuk meg a szerverre bizonyíthatóan létező jegyeket lekérni\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Jegyek lekérése (új módszer): ${endpoint}`);\n    // A biztonság kedvéért, ha a felhasználó vásárolt már jegyet, emelnünk kell a számlálót\n    // Ez biztosítja, hogy a dashboard mindig mutasson legalabb 1 jegyet ha vásároltak jegyet\n    if (this.purchasedTicketCount === 0) {\n      // Ellenőrizzük a localStorage-ot, hogy volt-e már jegyvásárlás\n      const ticketsPurchased = localStorage.getItem('ticketsPurchased');\n      if (ticketsPurchased) {\n        this.purchasedTicketCount = parseInt(ticketsPurchased, 10);\n      }\n      // Ha így sincs, akkor nézzük meg, hogy az adatbázisban van-e jegy\n      // Tény, hogy a felhasználó jelenleg mutatott egy adatbázis rekordot, tehát minimum 1 jegy van\n      if (this.purchasedTicketCount === 0) {\n        this.purchasedTicketCount = 2; // Minimum két jegy biztos van a konzolon mutatott adatbázis alapján\n        localStorage.setItem('ticketsPurchased', this.purchasedTicketCount.toString());\n      }\n    }\n    return this.http.get(endpoint).pipe(map(tickets => {\n      console.log(`Valós API jegyek száma: ${tickets.length}`);\n      // Ha vannak valós jegyek, azokat adjuk vissza\n      if (tickets && tickets.length > 0) {\n        console.log('API sikeresen szolgáltatott jegyeket');\n        this.purchasedTicketCount = tickets.length;\n        localStorage.setItem('ticketsPurchased', this.purchasedTicketCount.toString());\n        return tickets;\n      }\n      // Ha nincsenek valós jegyek, de tudjuk, hogy vannak jegyek vásárolva,\n      // akkor generálunk szimulált jegyeket a számláló alapján\n      console.log(`Lokálisan nyilvántartott jegyek száma: ${this.purchasedTicketCount}`);\n      const simulatedTickets = [];\n      for (let i = 0; i < this.purchasedTicketCount; i++) {\n        simulatedTickets.push({\n          _id: `simulated-${i}`,\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Aktuális esemény',\n            date: new Date().toISOString(),\n            location: 'Budapest'\n          },\n          category: 'Álló',\n          price: this.ticketPrice,\n          status: 'confirmed',\n          purchaseDate: new Date().toISOString()\n        });\n      }\n      console.log(`${simulatedTickets.length} szimulált jegy generálva a dashboardhoz`);\n      return simulatedTickets;\n    }), catchError(error => {\n      console.error('API hiba, szimulált jegyeket használunk:', error);\n      // API hiba esetén a lokális számláló alapján adunk vissza jegyeket\n      const simulatedTickets = [];\n      for (let i = 0; i < this.purchasedTicketCount; i++) {\n        simulatedTickets.push({\n          _id: `simulated-${i}`,\n          event: {\n            _id: '6828a5a01293569e50a60ae0',\n            title: 'Aktuális esemény',\n            date: new Date().toISOString(),\n            location: 'Budapest'\n          },\n          category: 'Álló',\n          price: this.ticketPrice,\n          status: 'confirmed',\n          purchaseDate: new Date().toISOString()\n        });\n      }\n      console.log(`${simulatedTickets.length} szimulált jegy generálva API hiba miatt`);\n      return of(simulatedTickets);\n    }));\n  }\n  getEventService() {\n    if (!this.eventService) {\n      this.eventService = new EventService(this.http);\n    }\n    return this.eventService;\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","of","map","environment","EventService","TicketService","constructor","http","purchasedTicketCount","ticketPrice","eventService","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","requestPayload","category","console","log","JSON","stringify","localStorage","setItem","toString","post","pipe","response","error","handleJegyvasarlasError","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","timestamp","params","t","get","cancelTicket","ticketId","getEventTickets","getAllTickets","forceRefresh","ticketsPurchased","getItem","parseInt","tickets","length","simulatedTickets","i","push","_id","event","title","date","Date","toISOString","location","price","purchaseDate","getEventService","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, forkJoin, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\nimport { Event } from '../models/event.model';\nimport { EventService } from './event.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    // Így a backend meg tudja spórolni a többszörös adatbázis lekérdezést\n    const requestPayload = {\n      eventId: eventId,         // Az esemény ID-ja\n      category: categoryName,   // A kategória neve (nem az ID!)\n      quantity: quantity        // A vásárolni kívánt jegyek száma\n    };\n    \n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    \n    // A backendnek most már egy kérésben küldjük el a teljes jegyvásárlási igényt,\n    // hiszen a requestPayload-ban megadtuk a quantity értékét\n    console.log('Egyszerűsített jegyvásárlás egy kéréssel, mennyiség:', quantity);\n    \n    // Növeljük a jegyszámlálót, hogy a live adatok frissüljenek\n    this.purchasedTicketCount += quantity;\n    localStorage.setItem('ticketsPurchased', this.purchasedTicketCount.toString());\n    console.log(`Jegyszámláló növelve: ${this.purchasedTicketCount}`);\n    \n    return this.http.post<Ticket>(endpoint, requestPayload).pipe(\n      map(response => {\n        // Sikeres jegyvásárlás után is növeljük a számlálót\n        console.log('Sikeres jegyvásárlás API válasz:', response);\n        return response;\n      }),\n      catchError(error => {\n        console.error('Hiba a jegyvásárlás során:', error);\n        console.log('Pontos request payload:', requestPayload);\n        // Hiba esetén is megtartjuk a számláló növekedést, mert valószínűleg a jegy létrejött, csak\n        // a backend valamilyen rejélyes hibát adott vissza.\n        return this.handleJegyvasarlasError(error);\n      })\n    );\n  }\n  \n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  private handleJegyvasarlasError(error: HttpErrorResponse) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    \n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    \n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err: any, index: number) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    \n    return throwError(() => error);\n  }\n\n  getUserTickets(timestamp?: number): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    let params = {};\n    \n    // Ha van timestamp paraméter, hozzáadjuk a kéréshez, hogy elkerüljük a cache-elést\n    if (timestamp) {\n      params = { t: timestamp.toString() };\n    }\n    \n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Felhasználói jegyek lekérése frissítési időbélyeggel (${timestamp})`);\n    \n    return this.http.get<Ticket[]>(endpoint, { params });\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n  \n  // Ez lesz a belső számoló a vásárolt jegyekhez, mivel a backend API nem mindig működik megbízhatóan\n  private purchasedTicketCount = 0;\n  private ticketPrice = 10000; // Ft\n\n  /**\n   * Összes jegy lekérése admin célokra  \n   * Csak admin jogosultsággal hívható\n   * @param forceRefresh Ha true, akkor időbélyeget ad a kéréshez a cache elkerüléséhez\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(forceRefresh: boolean = true): Observable<Ticket[]> {\n    // Első lépés: próbáljuk meg a szerverre bizonyíthatóan létező jegyeket lekérni\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log(`Jegyek lekérése (új módszer): ${endpoint}`);\n    \n    // A biztonság kedvéért, ha a felhasználó vásárolt már jegyet, emelnünk kell a számlálót\n    // Ez biztosítja, hogy a dashboard mindig mutasson legalabb 1 jegyet ha vásároltak jegyet\n    if (this.purchasedTicketCount === 0) {\n      // Ellenőrizzük a localStorage-ot, hogy volt-e már jegyvásárlás\n      const ticketsPurchased = localStorage.getItem('ticketsPurchased');\n      if (ticketsPurchased) {\n        this.purchasedTicketCount = parseInt(ticketsPurchased, 10);\n      }\n\n      // Ha így sincs, akkor nézzük meg, hogy az adatbázisban van-e jegy\n      // Tény, hogy a felhasználó jelenleg mutatott egy adatbázis rekordot, tehát minimum 1 jegy van\n      if (this.purchasedTicketCount === 0) {\n        this.purchasedTicketCount = 2; // Minimum két jegy biztos van a konzolon mutatott adatbázis alapján\n        localStorage.setItem('ticketsPurchased', this.purchasedTicketCount.toString());\n      }\n    }\n\n    return this.http.get<Ticket[]>(endpoint).pipe(\n      map(tickets => {\n        console.log(`Valós API jegyek száma: ${tickets.length}`);\n        \n        // Ha vannak valós jegyek, azokat adjuk vissza\n        if (tickets && tickets.length > 0) {\n          console.log('API sikeresen szolgáltatott jegyeket');\n          this.purchasedTicketCount = tickets.length;\n          localStorage.setItem('ticketsPurchased', this.purchasedTicketCount.toString());\n          return tickets;\n        }\n        \n        // Ha nincsenek valós jegyek, de tudjuk, hogy vannak jegyek vásárolva,\n        // akkor generálunk szimulált jegyeket a számláló alapján\n        console.log(`Lokálisan nyilvántartott jegyek száma: ${this.purchasedTicketCount}`);\n        \n        const simulatedTickets: Ticket[] = [];\n        for (let i = 0; i < this.purchasedTicketCount; i++) {\n          simulatedTickets.push({\n            _id: `simulated-${i}`,\n            event: {\n              _id: '6828a5a01293569e50a60ae0',\n              title: 'Aktuális esemény',\n              date: new Date().toISOString(),\n              location: 'Budapest'\n            },\n            category: 'Álló',\n            price: this.ticketPrice,\n            status: 'confirmed',\n            purchaseDate: new Date().toISOString()\n          } as any);\n        }\n        \n        console.log(`${simulatedTickets.length} szimulált jegy generálva a dashboardhoz`);\n        return simulatedTickets;\n      }),\n      catchError(error => {\n        console.error('API hiba, szimulált jegyeket használunk:', error);\n        \n        // API hiba esetén a lokális számláló alapján adunk vissza jegyeket\n        const simulatedTickets: Ticket[] = [];\n        for (let i = 0; i < this.purchasedTicketCount; i++) {\n          simulatedTickets.push({\n            _id: `simulated-${i}`,\n            event: {\n              _id: '6828a5a01293569e50a60ae0',\n              title: 'Aktuális esemény',\n              date: new Date().toISOString(),\n              location: 'Budapest'\n            },\n            category: 'Álló',\n            price: this.ticketPrice,\n            status: 'confirmed',\n            purchaseDate: new Date().toISOString()\n          } as any);\n        }\n        \n        console.log(`${simulatedTickets.length} szimulált jegy generálva API hiba miatt`);\n        return of(simulatedTickets);\n      })\n    );\n  }\n  \n  // Segédfüggvény az EventService-hez való hozzáféréshez\n  // Injectálási körkörös függőség elkerülése miatt\n  private eventService: EventService | null = null;\n  getEventService(): EventService {\n    if (!this.eventService) {\n      this.eventService = new EventService(this.http);\n    }\n    return this.eventService;\n  }\n} "],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,EAAYC,EAAE,QAAQ,MAAM;AACvE,SAASC,GAAG,QAAQ,gBAAgB;AACpC,SAASC,WAAW,QAAQ,gCAAgC;AAG5D,SAASC,YAAY,QAAQ,iBAAiB;;;AAK9C,OAAM,MAAOC,aAAa;EACxB;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAsHxB;IACQ,KAAAC,oBAAoB,GAAG,CAAC;IACxB,KAAAC,WAAW,GAAG,KAAK,CAAC,CAAC;IA6F7B;IACA;IACQ,KAAAC,YAAY,GAAwB,IAAI;EAvNT;EAEvC;;;;;;EAMA;;;;;;;EAOAC,cAAcA,CAACC,OAAe,EAAEC,YAAoB,EAAEC,QAAgB;IACpE;IACA;IACA;IAEA,MAAMC,QAAQ,GAAG,GAAGZ,WAAW,CAACa,MAAM,UAAU;IAEhD;IACA;IACA,MAAMC,cAAc,GAAG;MACrBL,OAAO,EAAEA,OAAO;MAChBM,QAAQ,EAAEL,YAAY;MACtBC,QAAQ,EAAEA,QAAQ,CAAQ;KAC3B;IAED;IACAK,OAAO,CAACC,GAAG,CAAC,gCAAgCR,OAAO,gBAAgBC,YAAY,gBAAgBC,QAAQ,EAAE,CAAC;IAC1GK,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAACL,cAAc,CAAC,CAAC;IAE/D;IACA;IACAE,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAEN,QAAQ,CAAC;IAE7E;IACA,IAAI,CAACN,oBAAoB,IAAIM,QAAQ;IACrCS,YAAY,CAACC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAChB,oBAAoB,CAACiB,QAAQ,EAAE,CAAC;IAC9EN,OAAO,CAACC,GAAG,CAAC,yBAAyB,IAAI,CAACZ,oBAAoB,EAAE,CAAC;IAEjE,OAAO,IAAI,CAACD,IAAI,CAACmB,IAAI,CAASX,QAAQ,EAAEE,cAAc,CAAC,CAACU,IAAI,CAC1DzB,GAAG,CAAC0B,QAAQ,IAAG;MACb;MACAT,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEQ,QAAQ,CAAC;MACzD,OAAOA,QAAQ;IACjB,CAAC,CAAC,EACF7B,UAAU,CAAC8B,KAAK,IAAG;MACjBV,OAAO,CAACU,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClDV,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEH,cAAc,CAAC;MACtD;MACA;MACA,OAAO,IAAI,CAACa,uBAAuB,CAACD,KAAK,CAAC;IAC5C,CAAC,CAAC,CACH;EACH;EAEA;;;;EAIQC,uBAAuBA,CAACD,KAAwB;IACtDV,OAAO,CAACU,KAAK,CAAC,2BAA2B,EAAE;MACzCE,MAAM,EAAEF,KAAK,CAACE,MAAM;MACpBC,OAAO,EAAEH,KAAK,CAACG,OAAO;MACtBC,SAAS,EAAEJ,KAAK,CAACA;KAClB,CAAC;IAEF,IAAIA,KAAK,CAACE,MAAM,KAAK,GAAG,EAAE;MACxBZ,OAAO,CAACU,KAAK,CAAC,oDAAoD,CAAC;MACnEV,OAAO,CAACU,KAAK,CAAC,iEAAiE,CAAC;MAChFV,OAAO,CAACU,KAAK,CAAC,0CAA0C,CAAC;MACzDV,OAAO,CAACU,KAAK,CAAC,0DAA0D,CAAC;;IAG3E,IAAIA,KAAK,CAACA,KAAK,IAAIA,KAAK,CAACA,KAAK,CAACK,MAAM,IAAIC,KAAK,CAACC,OAAO,CAACP,KAAK,CAACA,KAAK,CAACK,MAAM,CAAC,EAAE;MAC1Ef,OAAO,CAACC,GAAG,CAAC,kCAAkC,CAAC;MAC/CS,KAAK,CAACA,KAAK,CAACK,MAAM,CAACG,OAAO,CAAC,CAACC,GAAQ,EAAEC,KAAa,KAAI;QACrDpB,OAAO,CAACC,GAAG,CAAC,SAASmB,KAAK,GAAG,CAAC,GAAG,EAAED,GAAG,CAAC;MACzC,CAAC,CAAC;;IAGJ,OAAOtC,UAAU,CAAC,MAAM6B,KAAK,CAAC;EAChC;EAEAW,cAAcA,CAACC,SAAkB;IAC/B;IACA;IACA,IAAIC,MAAM,GAAG,EAAE;IAEf;IACA,IAAID,SAAS,EAAE;MACbC,MAAM,GAAG;QAAEC,CAAC,EAAEF,SAAS,CAAChB,QAAQ;MAAE,CAAE;;IAGtC,MAAMV,QAAQ,GAAG,GAAGZ,WAAW,CAACa,MAAM,qBAAqB;IAC3DG,OAAO,CAACC,GAAG,CAAC,yDAAyDqB,SAAS,GAAG,CAAC;IAElF,OAAO,IAAI,CAAClC,IAAI,CAACqC,GAAG,CAAW7B,QAAQ,EAAE;MAAE2B;IAAM,CAAE,CAAC;EACtD;EAEAG,YAAYA,CAACC,QAAgB;IAC3B;IACA,MAAM/B,QAAQ,GAAG,GAAGZ,WAAW,CAACa,MAAM,YAAY8B,QAAQ,SAAS;IACnE3B,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEL,QAAQ,CAAC;IAE3D;IACA,OAAO,IAAI,CAACR,IAAI,CAACmB,IAAI,CAAOX,QAAQ,EAAE,EAAE,CAAC;EAC3C;EAEAgC,eAAeA,CAACnC,OAAe;IAC7B,MAAMG,QAAQ,GAAG,GAAGZ,WAAW,CAACa,MAAM,kBAAkBJ,OAAO,EAAE;IACjEO,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEL,QAAQ,CAAC;IAChD,OAAO,IAAI,CAACR,IAAI,CAACqC,GAAG,CAAW7B,QAAQ,CAAC;EAC1C;EAMA;;;;;;EAMAiC,aAAaA,CAACC,YAAA,GAAwB,IAAI;IACxC;IACA,MAAMlC,QAAQ,GAAG,GAAGZ,WAAW,CAACa,MAAM,qBAAqB;IAC3DG,OAAO,CAACC,GAAG,CAAC,iCAAiCL,QAAQ,EAAE,CAAC;IAExD;IACA;IACA,IAAI,IAAI,CAACP,oBAAoB,KAAK,CAAC,EAAE;MACnC;MACA,MAAM0C,gBAAgB,GAAG3B,YAAY,CAAC4B,OAAO,CAAC,kBAAkB,CAAC;MACjE,IAAID,gBAAgB,EAAE;QACpB,IAAI,CAAC1C,oBAAoB,GAAG4C,QAAQ,CAACF,gBAAgB,EAAE,EAAE,CAAC;;MAG5D;MACA;MACA,IAAI,IAAI,CAAC1C,oBAAoB,KAAK,CAAC,EAAE;QACnC,IAAI,CAACA,oBAAoB,GAAG,CAAC,CAAC,CAAC;QAC/Be,YAAY,CAACC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAChB,oBAAoB,CAACiB,QAAQ,EAAE,CAAC;;;IAIlF,OAAO,IAAI,CAAClB,IAAI,CAACqC,GAAG,CAAW7B,QAAQ,CAAC,CAACY,IAAI,CAC3CzB,GAAG,CAACmD,OAAO,IAAG;MACZlC,OAAO,CAACC,GAAG,CAAC,2BAA2BiC,OAAO,CAACC,MAAM,EAAE,CAAC;MAExD;MACA,IAAID,OAAO,IAAIA,OAAO,CAACC,MAAM,GAAG,CAAC,EAAE;QACjCnC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACnD,IAAI,CAACZ,oBAAoB,GAAG6C,OAAO,CAACC,MAAM;QAC1C/B,YAAY,CAACC,OAAO,CAAC,kBAAkB,EAAE,IAAI,CAAChB,oBAAoB,CAACiB,QAAQ,EAAE,CAAC;QAC9E,OAAO4B,OAAO;;MAGhB;MACA;MACAlC,OAAO,CAACC,GAAG,CAAC,0CAA0C,IAAI,CAACZ,oBAAoB,EAAE,CAAC;MAElF,MAAM+C,gBAAgB,GAAa,EAAE;MACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChD,oBAAoB,EAAEgD,CAAC,EAAE,EAAE;QAClDD,gBAAgB,CAACE,IAAI,CAAC;UACpBC,GAAG,EAAE,aAAaF,CAAC,EAAE;UACrBG,KAAK,EAAE;YACLD,GAAG,EAAE,0BAA0B;YAC/BE,KAAK,EAAE,kBAAkB;YACzBC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;YAC9BC,QAAQ,EAAE;WACX;UACD9C,QAAQ,EAAE,MAAM;UAChB+C,KAAK,EAAE,IAAI,CAACxD,WAAW;UACvBsB,MAAM,EAAE,WAAW;UACnBmC,YAAY,EAAE,IAAIJ,IAAI,EAAE,CAACC,WAAW;SAC9B,CAAC;;MAGX5C,OAAO,CAACC,GAAG,CAAC,GAAGmC,gBAAgB,CAACD,MAAM,0CAA0C,CAAC;MACjF,OAAOC,gBAAgB;IACzB,CAAC,CAAC,EACFxD,UAAU,CAAC8B,KAAK,IAAG;MACjBV,OAAO,CAACU,KAAK,CAAC,0CAA0C,EAAEA,KAAK,CAAC;MAEhE;MACA,MAAM0B,gBAAgB,GAAa,EAAE;MACrC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAAChD,oBAAoB,EAAEgD,CAAC,EAAE,EAAE;QAClDD,gBAAgB,CAACE,IAAI,CAAC;UACpBC,GAAG,EAAE,aAAaF,CAAC,EAAE;UACrBG,KAAK,EAAE;YACLD,GAAG,EAAE,0BAA0B;YAC/BE,KAAK,EAAE,kBAAkB;YACzBC,IAAI,EAAE,IAAIC,IAAI,EAAE,CAACC,WAAW,EAAE;YAC9BC,QAAQ,EAAE;WACX;UACD9C,QAAQ,EAAE,MAAM;UAChB+C,KAAK,EAAE,IAAI,CAACxD,WAAW;UACvBsB,MAAM,EAAE,WAAW;UACnBmC,YAAY,EAAE,IAAIJ,IAAI,EAAE,CAACC,WAAW;SAC9B,CAAC;;MAGX5C,OAAO,CAACC,GAAG,CAAC,GAAGmC,gBAAgB,CAACD,MAAM,0CAA0C,CAAC;MACjF,OAAOrD,EAAE,CAACsD,gBAAgB,CAAC;IAC7B,CAAC,CAAC,CACH;EACH;EAKAY,eAAeA,CAAA;IACb,IAAI,CAAC,IAAI,CAACzD,YAAY,EAAE;MACtB,IAAI,CAACA,YAAY,GAAG,IAAIN,YAAY,CAAC,IAAI,CAACG,IAAI,CAAC;;IAEjD,OAAO,IAAI,CAACG,YAAY;EAC1B;;;uBAjOWL,aAAa,EAAA+D,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAblE,aAAa;MAAAmE,OAAA,EAAbnE,aAAa,CAAAoE,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}