{"ast":null,"code":"import { catchError, throwError, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // A backend API-ja változtatta a quantity paramétert a request formátumában\n    // Próbáljuk mindkettőt - először a quantity paraméterrel\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName // A kategória neve (nem az ID!)\n    };\n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    // Egyszerre csak egy jegyet tud kezelni a backend, tehát ha több jegyet vásárolnak, külön-külön kéréseket kell küldeni\n    if (quantity === 1) {\n      // Egyszerű eset: csak egy jegyet vásárolunk\n      return this.http.post(endpoint, requestPayload).pipe(catchError(error => {\n        console.error('Hiba a jegyvásárlás során:', error);\n        console.log('Pontos request payload:', requestPayload);\n        return this.handleJegyvasarlasError(error);\n      }));\n    } else {\n      // Több jegyet vásárolunk, több kérést kell küldeni\n      const requests = [];\n      for (let i = 0; i < quantity; i++) {\n        // Minden jegyet külön-külön vásárolunk meg\n        requests.push(this.http.post(endpoint, requestPayload).pipe(catchError(error => {\n          console.error(`Hiba a ${i + 1}. jegy vásárlása során:`, error);\n          return throwError(() => error);\n        })));\n      }\n      // ForkJoin-nal várjuk meg az összes kérést\n      return forkJoin(requests).pipe(map(tickets => {\n        console.log(`Sikeres vásárlás! ${tickets.length} jegy megvásárolva.`);\n        return tickets[0]; // Visszaadjuk az első jegyet mint eredmény\n      }), catchError(this.handleJegyvasarlasError));\n    }\n  }\n  handleJegyvasarlasError(error) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err, index) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    return throwError(() => error);\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","forkJoin","map","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","requestPayload","category","console","log","JSON","stringify","post","pipe","error","handleJegyvasarlasError","requests","i","push","tickets","length","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // A backend API-ja változtatta a quantity paramétert a request formátumában\n    // Próbáljuk mindkettőt - először a quantity paraméterrel\n    const requestPayload = {\n      eventId: eventId,       // Az esemény ID-ja\n      category: categoryName, // A kategória neve (nem az ID!)\n    };\n    \n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    \n    // Egyszerre csak egy jegyet tud kezelni a backend, tehát ha több jegyet vásárolnak, külön-külön kéréseket kell küldeni\n    if (quantity === 1) {\n      // Egyszerű eset: csak egy jegyet vásárolunk\n      return this.http.post<Ticket>(endpoint, requestPayload).pipe(\n        catchError(error => {\n          console.error('Hiba a jegyvásárlás során:', error);\n          console.log('Pontos request payload:', requestPayload);\n          return this.handleJegyvasarlasError(error);\n        })\n      );\n    } else {\n      // Több jegyet vásárolunk, több kérést kell küldeni\n      const requests: Observable<Ticket>[] = [];\n      \n      for (let i = 0; i < quantity; i++) {\n        // Minden jegyet külön-külön vásárolunk meg\n        requests.push(\n          this.http.post<Ticket>(endpoint, requestPayload).pipe(\n            catchError(error => {\n              console.error(`Hiba a ${i+1}. jegy vásárlása során:`, error);\n              return throwError(() => error);\n            })\n          )\n        );\n      }\n      \n      // ForkJoin-nal várjuk meg az összes kérést\n      return forkJoin(requests).pipe(\n        map(tickets => {\n          console.log(`Sikeres vásárlás! ${tickets.length} jegy megvásárolva.`);\n          return tickets[0]; // Visszaadjuk az első jegyet mint eredmény\n        }),\n        catchError(this.handleJegyvasarlasError)\n      );\n    }\n  }\n  \n  private handleJegyvasarlasError(error: HttpErrorResponse) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    \n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err: any, index: number) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    \n    return throwError(() => error);\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}