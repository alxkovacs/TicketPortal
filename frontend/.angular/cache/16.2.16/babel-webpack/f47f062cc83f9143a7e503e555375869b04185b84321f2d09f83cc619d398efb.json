{"ast":null,"code":"import { BehaviorSubject, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class AuthService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n  register(userData) {\n    return this.http.post(`${this.apiUrl}/register`, userData).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  login(credentials) {\n    return this.http.post(`${this.apiUrl}/login`, credentials).pipe(tap(user => {\n      this.currentUserSubject.next(user);\n      localStorage.setItem('currentUser', JSON.stringify(user));\n    }));\n  }\n  logout() {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n  }\n  isAuthenticated() {\n    return this.currentUserSubject.value !== null;\n  }\n  getUserRole() {\n    return this.currentUserSubject.value?.role || null;\n  }\n  isAdmin() {\n    // Kinyerjük a teljes User objektumot, ne csak a szerepkört\n    const currentUser = this.getCurrentUser();\n    console.log('isAdmin ellenőrzés - teljes user objektum:', currentUser);\n    // Ha nincs felhasználó, vagy nincs szerepköre, akkor biztos nem admin\n    if (!currentUser) {\n      console.log('Nincs bejelentkezett felhasználó');\n      return false;\n    }\n    // Ellenőrizzük külön a role tulajdonságot\n    console.log('Szerepkör:', currentUser.role);\n    console.log('Szerepkör típusa:', typeof currentUser.role);\n    // Célzottan kisbetűs \"admin\" értéket ellenőrizzünk\n    // Mindent sztringgé konvertálunk és trim-eljük, hogy biztos legyen\n    const userRole = currentUser.role ? String(currentUser.role).trim().toLowerCase() : '';\n    // Két módon is ellenőrizzük az admin jogosultságot a biztonság kedvéért\n    const isUserAdmin = userRole === 'admin';\n    console.log('Admin jogosultság eredménye:', isUserAdmin);\n    return isUserAdmin;\n  }\n  getCurrentUser() {\n    return this.currentUserSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","tap","environment","AuthService","constructor","http","apiUrl","currentUserSubject","currentUser$","asObservable","storedUser","localStorage","getItem","next","JSON","parse","register","userData","post","pipe","user","setItem","stringify","login","credentials","logout","removeItem","isAuthenticated","value","getUserRole","role","isAdmin","currentUser","getCurrentUser","console","log","userRole","String","trim","toLowerCase","isUserAdmin","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { User } from '../models/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private apiUrl = `${environment.apiUrl}/auth`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    const storedUser = localStorage.getItem('currentUser');\n    if (storedUser) {\n      this.currentUserSubject.next(JSON.parse(storedUser));\n    }\n  }\n\n  register(userData: {\n    email: string;\n    password: string;\n    firstName: string;\n    lastName: string;\n  }): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/register`, userData)\n      .pipe(tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      }));\n  }\n\n  login(credentials: { email: string; password: string }): Observable<User> {\n    return this.http.post<User>(`${this.apiUrl}/login`, credentials).pipe(\n      tap(user => {\n        this.currentUserSubject.next(user);\n        localStorage.setItem('currentUser', JSON.stringify(user));\n      })\n    );\n  }\n\n  logout(): void {\n    this.currentUserSubject.next(null);\n    localStorage.removeItem('currentUser');\n  }\n\n  isAuthenticated(): boolean {\n    return this.currentUserSubject.value !== null;\n  }\n\n  getUserRole(): string | null {\n    return this.currentUserSubject.value?.role || null;\n  }\n\n  isAdmin(): boolean {\n    // Kinyerjük a teljes User objektumot, ne csak a szerepkört\n    const currentUser = this.getCurrentUser();\n    console.log('isAdmin ellenőrzés - teljes user objektum:', currentUser);\n    \n    // Ha nincs felhasználó, vagy nincs szerepköre, akkor biztos nem admin\n    if (!currentUser) {\n      console.log('Nincs bejelentkezett felhasználó');\n      return false;\n    }\n    \n    // Ellenőrizzük külön a role tulajdonságot\n    console.log('Szerepkör:', currentUser.role);\n    console.log('Szerepkör típusa:', typeof currentUser.role);\n    \n    // Célzottan kisbetűs \"admin\" értéket ellenőrizzünk\n    // Mindent sztringgé konvertálunk és trim-eljük, hogy biztos legyen\n    const userRole = currentUser.role ? String(currentUser.role).trim().toLowerCase() : '';\n    \n    // Két módon is ellenőrizzük az admin jogosultságot a biztonság kedvéért\n    const isUserAdmin = userRole === 'admin';\n    console.log('Admin jogosultság eredménye:', isUserAdmin);\n    \n    return isUserAdmin;\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}