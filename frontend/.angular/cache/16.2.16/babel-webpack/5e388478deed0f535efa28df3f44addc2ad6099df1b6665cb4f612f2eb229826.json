{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId, categoryId, quantity) {\n    // Megpróbáljuk azonosítani, hogy mit vár a backend\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // Nézzük meg, van-e felhasználó azonosító a localStorage-ban\n    let userId = null;\n    try {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        const userData = JSON.parse(userStr);\n        if (userData && userData.user && userData.user._id) {\n          userId = userData.user._id;\n        } else if (userData && userData._id) {\n          userId = userData._id;\n        }\n      }\n      // Ha nincs, próbáljuk a currentUser kulcsot\n      if (!userId) {\n        const currentUserStr = localStorage.getItem('currentUser');\n        if (currentUserStr) {\n          const currentUserData = JSON.parse(currentUserStr);\n          if (currentUserData && currentUserData._id) {\n            userId = currentUserData._id;\n          }\n        }\n      }\n    } catch (e) {\n      console.error('Hiba a felhasználó ID kiolvasása közben:', e);\n    }\n    // Többféle formaátumban is elküldjük az adatokat\n    const requestPayload = {\n      // Alapadatok\n      eventId: eventId,\n      categoryId: categoryId,\n      quantity: quantity,\n      // Alternatív mezőnevek\n      event: eventId,\n      category: categoryId,\n      count: quantity,\n      // String formátumú adatok (hátha ezeket várja)\n      eventId_str: eventId.toString(),\n      categoryId_str: categoryId.toString(),\n      quantity_str: quantity.toString(),\n      // Extra adatok\n      userId: userId,\n      user: userId\n    };\n    console.log('Jegyvásárlási kérés:', {\n      endpoint,\n      method: 'POST',\n      payload: requestPayload\n    });\n    // Részletes hibalogolással figyeljük a HTTP hibát\n    return this.http.post(endpoint, requestPayload).pipe(catchError(error => {\n      console.error('Részletes vásárlási hiba:', {\n        status: error.status,\n        message: error.message,\n        errorBody: error.error\n      });\n      return throwError(() => error);\n    }));\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    const endpoint = `${environment.apiUrl}/tickets/cancel/${ticketId}`;\n    console.log('Jegy lemondása:', endpoint);\n    // Alternatív formátumban próbáljuk a lemondást\n    return this.http.post(endpoint, {\n      ticketId: ticketId\n    });\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryId","quantity","endpoint","apiUrl","userId","userStr","localStorage","getItem","userData","JSON","parse","user","_id","currentUserStr","currentUserData","e","console","error","requestPayload","event","category","count","eventId_str","toString","categoryId_str","quantity_str","log","method","payload","post","pipe","status","message","errorBody","getUserTickets","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId: string, categoryId: string, quantity: number): Observable<Ticket> {\n    // Megpróbáljuk azonosítani, hogy mit vár a backend\n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // Nézzük meg, van-e felhasználó azonosító a localStorage-ban\n    let userId = null;\n    try {\n      const userStr = localStorage.getItem('user');\n      if (userStr) {\n        const userData = JSON.parse(userStr);\n        if (userData && userData.user && userData.user._id) {\n          userId = userData.user._id;\n        } else if (userData && userData._id) {\n          userId = userData._id;\n        }\n      }\n      \n      // Ha nincs, próbáljuk a currentUser kulcsot\n      if (!userId) {\n        const currentUserStr = localStorage.getItem('currentUser');\n        if (currentUserStr) {\n          const currentUserData = JSON.parse(currentUserStr);\n          if (currentUserData && currentUserData._id) {\n            userId = currentUserData._id;\n          }\n        }\n      }\n    } catch (e) {\n      console.error('Hiba a felhasználó ID kiolvasása közben:', e);\n    }\n    \n    // Többféle formaátumban is elküldjük az adatokat\n    const requestPayload = {\n      // Alapadatok\n      eventId: eventId,\n      categoryId: categoryId,\n      quantity: quantity,\n      \n      // Alternatív mezőnevek\n      event: eventId,\n      category: categoryId,\n      count: quantity,\n      \n      // String formátumú adatok (hátha ezeket várja)\n      eventId_str: eventId.toString(),\n      categoryId_str: categoryId.toString(),\n      quantity_str: quantity.toString(),\n      \n      // Extra adatok\n      userId: userId,\n      user: userId\n    };\n    \n    console.log('Jegyvásárlási kérés:', {\n      endpoint,\n      method: 'POST',\n      payload: requestPayload\n    });\n    \n    // Részletes hibalogolással figyeljük a HTTP hibát\n    return this.http.post<Ticket>(endpoint, requestPayload)\n      .pipe(\n        catchError(error => {\n          console.error('Részletes vásárlási hiba:', {\n            status: error.status,\n            message: error.message,\n            errorBody: error.error\n          });\n          return throwError(() => error);\n        })\n      );\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    const endpoint = `${environment.apiUrl}/tickets/cancel/${ticketId}`;\n    console.log('Jegy lemondása:', endpoint);\n    // Alternatív formátumban próbáljuk a lemondást\n    return this.http.post<void>(endpoint, {\n      ticketId: ticketId\n    });\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"AAEA,SAAqBA,UAAU,EAAEC,UAAU,QAAQ,MAAM;AACzD,SAASC,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,aAAa;EACxB;EACA;EAEAC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAEvC;;;;;;EAMAC,cAAcA,CAACC,OAAe,EAAEC,UAAkB,EAAEC,QAAgB;IAClE;IACA,MAAMC,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,UAAU;IAEhD;IACA,IAAIC,MAAM,GAAG,IAAI;IACjB,IAAI;MACF,MAAMC,OAAO,GAAGC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC;MAC5C,IAAIF,OAAO,EAAE;QACX,MAAMG,QAAQ,GAAGC,IAAI,CAACC,KAAK,CAACL,OAAO,CAAC;QACpC,IAAIG,QAAQ,IAAIA,QAAQ,CAACG,IAAI,IAAIH,QAAQ,CAACG,IAAI,CAACC,GAAG,EAAE;UAClDR,MAAM,GAAGI,QAAQ,CAACG,IAAI,CAACC,GAAG;SAC3B,MAAM,IAAIJ,QAAQ,IAAIA,QAAQ,CAACI,GAAG,EAAE;UACnCR,MAAM,GAAGI,QAAQ,CAACI,GAAG;;;MAIzB;MACA,IAAI,CAACR,MAAM,EAAE;QACX,MAAMS,cAAc,GAAGP,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;QAC1D,IAAIM,cAAc,EAAE;UAClB,MAAMC,eAAe,GAAGL,IAAI,CAACC,KAAK,CAACG,cAAc,CAAC;UAClD,IAAIC,eAAe,IAAIA,eAAe,CAACF,GAAG,EAAE;YAC1CR,MAAM,GAAGU,eAAe,CAACF,GAAG;;;;KAInC,CAAC,OAAOG,CAAC,EAAE;MACVC,OAAO,CAACC,KAAK,CAAC,0CAA0C,EAAEF,CAAC,CAAC;;IAG9D;IACA,MAAMG,cAAc,GAAG;MACrB;MACAnB,OAAO,EAAEA,OAAO;MAChBC,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA,QAAQ;MAElB;MACAkB,KAAK,EAAEpB,OAAO;MACdqB,QAAQ,EAAEpB,UAAU;MACpBqB,KAAK,EAAEpB,QAAQ;MAEf;MACAqB,WAAW,EAAEvB,OAAO,CAACwB,QAAQ,EAAE;MAC/BC,cAAc,EAAExB,UAAU,CAACuB,QAAQ,EAAE;MACrCE,YAAY,EAAExB,QAAQ,CAACsB,QAAQ,EAAE;MAEjC;MACAnB,MAAM,EAAEA,MAAM;MACdO,IAAI,EAAEP;KACP;IAEDY,OAAO,CAACU,GAAG,CAAC,sBAAsB,EAAE;MAClCxB,QAAQ;MACRyB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAEV;KACV,CAAC;IAEF;IACA,OAAO,IAAI,CAACrB,IAAI,CAACgC,IAAI,CAAS3B,QAAQ,EAAEgB,cAAc,CAAC,CACpDY,IAAI,CACHtC,UAAU,CAACyB,KAAK,IAAG;MACjBD,OAAO,CAACC,KAAK,CAAC,2BAA2B,EAAE;QACzCc,MAAM,EAAEd,KAAK,CAACc,MAAM;QACpBC,OAAO,EAAEf,KAAK,CAACe,OAAO;QACtBC,SAAS,EAAEhB,KAAK,CAACA;OAClB,CAAC;MACF,OAAOxB,UAAU,CAAC,MAAMwB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACL;EAEAiB,cAAcA,CAAA;IACZ;IACA;IACA,MAAMhC,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,qBAAqB;IAC3Da,OAAO,CAACU,GAAG,CAAC,+BAA+B,EAAExB,QAAQ,CAAC;IAEtD,OAAO,IAAI,CAACL,IAAI,CAACsC,GAAG,CAAWjC,QAAQ,CAAC;EAC1C;EAEAkC,YAAYA,CAACC,QAAgB;IAC3B,MAAMnC,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,mBAAmBkC,QAAQ,EAAE;IACnErB,OAAO,CAACU,GAAG,CAAC,iBAAiB,EAAExB,QAAQ,CAAC;IACxC;IACA,OAAO,IAAI,CAACL,IAAI,CAACgC,IAAI,CAAO3B,QAAQ,EAAE;MACpCmC,QAAQ,EAAEA;KACX,CAAC;EACJ;EAEAC,eAAeA,CAACvC,OAAe;IAC7B,MAAMG,QAAQ,GAAG,GAAGR,WAAW,CAACS,MAAM,kBAAkBJ,OAAO,EAAE;IACjEiB,OAAO,CAACU,GAAG,CAAC,yBAAyB,EAAExB,QAAQ,CAAC;IAChD,OAAO,IAAI,CAACL,IAAI,CAACsC,GAAG,CAAWjC,QAAQ,CAAC;EAC1C;;;uBA3GWP,aAAa,EAAA4C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAb/C,aAAa;MAAAgD,OAAA,EAAbhD,aAAa,CAAAiD,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}