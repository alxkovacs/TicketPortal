{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    // Így a backend meg tudja spórolni a többszörös adatbázis lekérdezést\n    const requestPayload = {\n      eventId: eventId,\n      category: categoryName,\n      quantity: quantity // A vásárolni kívánt jegyek száma\n    };\n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    // A backendnek most már egy kérésben küldjük el a teljes jegyvásárlási igényt,\n    // hiszen a requestPayload-ban megadtuk a quantity értékét\n    console.log('Egyszerűsített jegyvásárlás egy kéréssel, mennyiség:', quantity);\n    return this.http.post(endpoint, requestPayload).pipe(catchError(error => {\n      console.error('Hiba a jegyvásárlás során:', error);\n      console.log('Pontos request payload:', requestPayload);\n      return this.handleJegyvasarlasError(error);\n    }));\n  }\n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  handleJegyvasarlasError(error) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err, index) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    return throwError(() => error);\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  /**\n   * Összes jegy lekérése admin célokra\n   * Csak admin jogosultsággal hívható\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets() {\n    const endpoint = `${environment.apiUrl}/tickets/admin/all`;\n    console.log('Összes jegy lekérése admin célra:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryName","quantity","endpoint","apiUrl","requestPayload","category","console","log","JSON","stringify","post","pipe","error","handleJegyvasarlasError","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","get","cancelTicket","ticketId","getEventTickets","getAllTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError, forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegy vásárlása (egy vagy több)\n   * A backend a kategória NEVET várja, nem annak ID-ját!\n   * FONTOS! A backendben lévő értékek vizsgálata alapján\n   * 1. A status 'active' érték a controllerben, de az adatbázisban 'confirmed' értékek vannak.\n   * 2. Többszöri jegy vásárlásnál külön kéréseket kell küldeni.\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket> {\n    // A backend kód megtekintése után látjuk, hogy a backend a kategória NEVÉT várja, nem az azonosítóját!\n    // A backend kódrészlet:\n    // const ticketCategory = event.ticketCategories.find((cat) => cat.name === category);\n    \n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // A backendnek küldünk egy kérést, ami tartalmazza a mennyiséget is\n    // Így a backend meg tudja spórolni a többszörös adatbázis lekérdezést\n    const requestPayload = {\n      eventId: eventId,         // Az esemény ID-ja\n      category: categoryName,   // A kategória neve (nem az ID!)\n      quantity: quantity        // A vásárolni kívánt jegyek száma\n    };\n    \n    // 1. Leőször közvetlenül elküldjük a kérést a backendnek\n    console.log(`Jegyvásárlás indul. Esemény: ${eventId}, Kategória: ${categoryName}, Mennyiség: ${quantity}`);\n    console.log('Request payload:', JSON.stringify(requestPayload));\n    \n    // A backendnek most már egy kérésben küldjük el a teljes jegyvásárlási igényt,\n    // hiszen a requestPayload-ban megadtuk a quantity értékét\n    console.log('Egyszerűsített jegyvásárlás egy kéréssel, mennyiség:', quantity);\n    \n    return this.http.post<Ticket>(endpoint, requestPayload).pipe(\n      catchError(error => {\n        console.error('Hiba a jegyvásárlás során:', error);\n        console.log('Pontos request payload:', requestPayload);\n        return this.handleJegyvasarlasError(error);\n      })\n    );\n  }\n  \n  /**\n   * Jegyvásárláskor keletkezett hibák kezelése\n   * Részletes diagnosztikai naplózással\n   */\n  private handleJegyvasarlasError(error: HttpErrorResponse) {\n    console.error('Részletes vásárlási hiba:', {\n      status: error.status,\n      message: error.message,\n      errorBody: error.error\n    });\n    \n    if (error.status === 500) {\n      console.error('500-as szerver hiba történt. Lehetséges problémák:');\n      console.error('1. A backend request formátuma és a küldött adatok nem egyeznek');\n      console.error('2. Szerverhiba a jegy létrehozása közben');\n      console.error('3. Adatbázishiba vagy az esemény/kategória nem található');\n    }\n    \n    if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n      console.log('A szerver által jelentett hibák:');\n      error.error.errors.forEach((err: any, index: number) => {\n        console.log(`Hiba #${index + 1}:`, err);\n      });\n    }\n    \n    return throwError(() => error);\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n  \n  /**\n   * Összes jegy lekérése admin célokra\n   * Csak admin jogosultsággal hívható\n   * @returns Observable az összes jeggyel\n   */\n  getAllTickets(): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/admin/all`;\n    console.log('Összes jegy lekérése admin célra:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}