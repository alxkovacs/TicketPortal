{"ast":null,"code":"import { catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n  constructor(http) {\n    this.http = http;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegyvásárlás - többszörös jegyvásárlás támogatással\n   * @param eventId Az esemény azonosítója\n   * @param categoryName A kategória NEVE (nem ID-ja)\n   * @param quantity Jegyek száma (szám típusú)\n   * @returns Egy vagy több jegyet Observable-ben\n   */\n  purchaseTicket(eventId, categoryName, quantity) {\n    // Biztosítsuk, hogy szám típusa van a mennyiségnek\n    const numericQuantity = parseInt(String(quantity), 10);\n    if (isNaN(numericQuantity) || numericQuantity < 1) {\n      console.error('Hibás jegy darabszám:', quantity);\n      return throwError(() => new Error('Hibás jegy darabszám'));\n    }\n    // Az API végpont és kérés előkészítése\n    const endpoint = `${environment.apiUrl}/tickets`;\n    // HTTP kérés elkészítése explicit fejléc beállításokkal\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    // A json payload elkészítése - a legfontosabb rész!\n    const requestBody = JSON.stringify({\n      eventId,\n      category: categoryName,\n      quantity: numericQuantity\n    });\n    console.log('Jegyvásárlás indítása:');\n    console.log('- URL:', endpoint);\n    console.log('- Headers:', headers);\n    console.log('- Body:', requestBody);\n    console.log('- Darabszám típusa:', typeof numericQuantity);\n    console.log('- Minden adat:', {\n      eventId,\n      categoryName,\n      requestedQuantity: quantity,\n      processedQuantity: numericQuantity,\n      requestType: typeof requestBody\n    });\n    // A kérést most már a requestBody változóval küldenménk, de az tartalmazza a JSON.stringify-t\n    // Helyette közvetlenül az objektumot küldtük be\n    return this.http.post(endpoint, {\n      eventId,\n      category: categoryName,\n      quantity: numericQuantity\n    }, {\n      headers\n    }).pipe(catchError(error => {\n      console.error('Részletes vásárlási hiba:', {\n        status: error.status,\n        message: error.message,\n        errorBody: error.error\n      });\n      if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n        console.log('A szerver által jelentett hibák:');\n        error.error.errors.forEach((err, index) => {\n          console.log(`Hiba #${index + 1}:`, err);\n        });\n      }\n      return throwError(() => error);\n    }));\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post(endpoint, {});\n  }\n  getEventTickets(eventId) {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["catchError","throwError","environment","TicketService","constructor","http","purchaseTicket","eventId","categoryName","quantity","numericQuantity","parseInt","String","isNaN","console","error","Error","endpoint","apiUrl","headers","HttpHeaders","requestBody","JSON","stringify","category","log","requestedQuantity","processedQuantity","requestType","post","pipe","status","message","errorBody","errors","Array","isArray","forEach","err","index","getUserTickets","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Observable, catchError, throwError } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  // Közvetlenül használjuk az environment.apiUrl-t a következetesség érdekében\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  /**\n   * Jegyvásárlás - többszörös jegyvásárlás támogatással\n   * @param eventId Az esemény azonosítója\n   * @param categoryName A kategória NEVE (nem ID-ja)\n   * @param quantity Jegyek száma (szám típusú)\n   * @returns Egy vagy több jegyet Observable-ben\n   */\n  purchaseTicket(eventId: string, categoryName: string, quantity: number): Observable<Ticket | Ticket[]> {\n    // Biztosítsuk, hogy szám típusa van a mennyiségnek\n    const numericQuantity = parseInt(String(quantity), 10);\n    if (isNaN(numericQuantity) || numericQuantity < 1) {\n      console.error('Hibás jegy darabszám:', quantity);\n      return throwError(() => new Error('Hibás jegy darabszám'));\n    }\n    \n    // Az API végpont és kérés előkészítése\n    const endpoint = `${environment.apiUrl}/tickets`;\n    \n    // HTTP kérés elkészítése explicit fejléc beállításokkal\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    \n    // A json payload elkészítése - a legfontosabb rész!\n    const requestBody = JSON.stringify({\n      eventId,\n      category: categoryName,\n      quantity: numericQuantity\n    });\n    \n    console.log('Jegyvásárlás indítása:');\n    console.log('- URL:', endpoint);\n    console.log('- Headers:', headers);\n    console.log('- Body:', requestBody);\n    console.log('- Darabszám típusa:', typeof numericQuantity);\n    console.log('- Minden adat:', {\n      eventId,\n      categoryName,\n      requestedQuantity: quantity,\n      processedQuantity: numericQuantity,\n      requestType: typeof requestBody\n    });\n    \n    // A kérést most már a requestBody változóval küldenménk, de az tartalmazza a JSON.stringify-t\n    // Helyette közvetlenül az objektumot küldtük be\n    return this.http.post<Ticket | Ticket[]>(endpoint, {\n      eventId,\n      category: categoryName,\n      quantity: numericQuantity\n    }, { headers })\n      .pipe(\n        catchError((error: HttpErrorResponse) => {\n          console.error('Részletes vásárlási hiba:', {\n            status: error.status,\n            message: error.message,\n            errorBody: error.error\n          });\n          \n          if (error.error && error.error.errors && Array.isArray(error.error.errors)) {\n            console.log('A szerver által jelentett hibák:');\n            error.error.errors.forEach((err: any, index: number) => {\n              console.log(`Hiba #${index + 1}:`, err);\n            });\n          }\n          \n          return throwError(() => error);\n        })\n      );\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${environment.apiUrl}/tickets/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    // A backend route-okból látszik a helyes API végpont: POST /:id/cancel\n    const endpoint = `${environment.apiUrl}/tickets/${ticketId}/cancel`;\n    console.log('Jegy lemondása (javított végpont):', endpoint);\n    \n    // A backendhez nem kell külön payload, mert az ID már az URL-ben van\n    return this.http.post<void>(endpoint, {});\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    const endpoint = `${environment.apiUrl}/tickets/event/${eventId}`;\n    console.log('Eseményjegyek lekérése:', endpoint);\n    return this.http.get<Ticket[]>(endpoint);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}