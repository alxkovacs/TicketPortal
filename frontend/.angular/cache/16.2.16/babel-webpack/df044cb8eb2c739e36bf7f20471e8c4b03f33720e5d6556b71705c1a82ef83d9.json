{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class EventService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/events`;\n  }\n  getEvents() {\n    return this.http.get(this.apiUrl);\n  }\n  getEvent(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  /**\n   * Új esemény létrehozása\n   * A backend API formátumnak megfelelő adatokat küldi el\n   * @param eventData Az új esemény adatai\n   */\n  createEvent(eventData) {\n    console.log('EventService - createEvent kérés indul:', eventData);\n    // JSON másolat készítése, hogy ne módosítsuk az eredeti példányt\n    const event = JSON.parse(JSON.stringify(eventData));\n    // A szerző ID kezelése, ha nincs hozzáadva (néha ezt várja a backend)\n    if (!event.organizer) {\n      try {\n        // Próbáljuk meg a felhasználó ID-ját először a user kulcsból\n        const userStr = localStorage.getItem('user');\n        if (userStr) {\n          const userData = JSON.parse(userStr);\n          if (userData && userData.user && userData.user._id) {\n            event.organizer = userData.user._id;\n          } else if (userData && userData._id) {\n            event.organizer = userData._id;\n          } else if (userData && userData.id) {\n            event.organizer = userData.id;\n          }\n        }\n        // Ha még mindig nincs organizer, próbáljuk a currentUser kulcsból\n        if (!event.organizer) {\n          const currentUserStr = localStorage.getItem('currentUser');\n          if (currentUserStr) {\n            const currentUserData = JSON.parse(currentUserStr);\n            if (currentUserData && currentUserData._id) {\n              event.organizer = currentUserData._id;\n            } else if (currentUserData && currentUserData.id) {\n              event.organizer = currentUserData.id;\n            }\n          }\n        }\n      } catch (e) {\n        console.error('Hiba a szervező ID meghatározása közben:', e);\n      }\n    }\n    // Dátum helyességének ellenőrzése és formázása\n    if (event.date) {\n      try {\n        const date = new Date(event.date);\n        if (!isNaN(date.getTime())) {\n          event.date = date.toISOString();\n        }\n      } catch (e) {\n        console.error('Hiba a dátum formázás közben:', e);\n      }\n    }\n    // Biztosítsuk a jegykategoria mezőt\n    if (!event.ticketCategories || !Array.isArray(event.ticketCategories) || event.ticketCategories.length === 0) {\n      event.ticketCategories = [{\n        name: 'Alap jegy',\n        price: 1000,\n        availableTickets: 100\n      }];\n    }\n    // Számszerű értékek konvertálása, ha szövegként érkeznének\n    if (event.availableTickets) {\n      event.availableTickets = Number(event.availableTickets);\n    }\n    // Debug és küldés\n    console.log('A szervernek küldendő végleges esemény adatok:', event);\n    try {\n      return this.http.post(this.apiUrl, event);\n    } catch (error) {\n      console.error('Hiba a kérés küldése közben:', error);\n      throw error;\n    }\n  }\n  updateEvent(id, event) {\n    return this.http.put(`${this.apiUrl}/${id}`, event);\n  }\n  deleteEvent(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  getOrganizerEvents() {\n    return this.http.get(`${environment.apiUrl}/api/users/my-events`);\n  }\n  static {\n    this.ɵfac = function EventService_Factory(t) {\n      return new (t || EventService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: EventService,\n      factory: EventService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","EventService","constructor","http","apiUrl","getEvents","get","getEvent","id","createEvent","eventData","console","log","event","JSON","parse","stringify","organizer","userStr","localStorage","getItem","userData","user","_id","currentUserStr","currentUserData","e","error","date","Date","isNaN","getTime","toISOString","ticketCategories","Array","isArray","length","name","price","availableTickets","Number","post","updateEvent","put","deleteEvent","delete","getOrganizerEvents","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\event.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Event, TicketCategory } from '../models/event.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class EventService {\n  private apiUrl = `${environment.apiUrl}/events`;\n\n  constructor(private http: HttpClient) {}\n\n  getEvents(): Observable<Event[]> {\n    return this.http.get<Event[]>(this.apiUrl);\n  }\n\n  getEvent(id: string): Observable<Event> {\n    return this.http.get<Event>(`${this.apiUrl}/${id}`);\n  }\n\n  /**\n   * Új esemény létrehozása\n   * A backend API formátumnak megfelelő adatokat küldi el\n   * @param eventData Az új esemény adatai\n   */\n  createEvent(eventData: any): Observable<Event> {\n    console.log('EventService - createEvent kérés indul:', eventData);\n    \n    // JSON másolat készítése, hogy ne módosítsuk az eredeti példányt\n    const event = JSON.parse(JSON.stringify(eventData));\n    \n    // A szerző ID kezelése, ha nincs hozzáadva (néha ezt várja a backend)\n    if (!event.organizer) {\n      try {\n        // Próbáljuk meg a felhasználó ID-ját először a user kulcsból\n        const userStr = localStorage.getItem('user');\n        if (userStr) {\n          const userData = JSON.parse(userStr);\n          if (userData && userData.user && userData.user._id) {\n            event.organizer = userData.user._id;\n          } else if (userData && userData._id) {\n            event.organizer = userData._id;\n          } else if (userData && userData.id) {\n            event.organizer = userData.id;\n          }\n        }\n        \n        // Ha még mindig nincs organizer, próbáljuk a currentUser kulcsból\n        if (!event.organizer) {\n          const currentUserStr = localStorage.getItem('currentUser');\n          if (currentUserStr) {\n            const currentUserData = JSON.parse(currentUserStr);\n            if (currentUserData && currentUserData._id) {\n              event.organizer = currentUserData._id;\n            } else if (currentUserData && currentUserData.id) {\n              event.organizer = currentUserData.id;\n            }\n          }\n        }\n      } catch (e) {\n        console.error('Hiba a szervező ID meghatározása közben:', e);\n      }\n    }\n    \n    // Dátum helyességének ellenőrzése és formázása\n    if (event.date) {\n      try {\n        const date = new Date(event.date);\n        if (!isNaN(date.getTime())) {\n          event.date = date.toISOString();\n        }\n      } catch (e) {\n        console.error('Hiba a dátum formázás közben:', e);\n      }\n    }\n    \n    // Biztosítsuk a jegykategoria mezőt\n    if (!event.ticketCategories || !Array.isArray(event.ticketCategories) || event.ticketCategories.length === 0) {\n      event.ticketCategories = [{\n        name: 'Alap jegy',\n        price: 1000,\n        availableTickets: 100\n      }];\n    }\n    \n    // Számszerű értékek konvertálása, ha szövegként érkeznének\n    if (event.availableTickets) {\n      event.availableTickets = Number(event.availableTickets);\n    }\n    \n    // Debug és küldés\n    console.log('A szervernek küldendő végleges esemény adatok:', event);\n    try {\n      return this.http.post<Event>(this.apiUrl, event);\n    } catch (error) {\n      console.error('Hiba a kérés küldése közben:', error);\n      throw error;\n    }\n  }\n\n  updateEvent(id: string, event: Event): Observable<Event> {\n    return this.http.put<Event>(`${this.apiUrl}/${id}`, event);\n  }\n\n  deleteEvent(id: string): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n\n  getOrganizerEvents(): Observable<Event[]> {\n    return this.http.get<Event[]>(`${environment.apiUrl}/api/users/my-events`);\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}