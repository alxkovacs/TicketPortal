{"ast":null,"code":"import { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TicketService {\n  constructor(http) {\n    this.http = http;\n    // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n    this.apiUrl = `${environment.apiUrl}/tickets`;\n  }\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId, categoryId, quantity) {\n    // Vizsgáljuk meg még egyéb lehetőségeket a backend API-val\n    // A legtisztább végpont: a sima /api/tickets\n    const requestPayload = {\n      eventId: eventId,\n      categoryId: categoryId,\n      quantity: quantity\n    };\n    console.log('Jegyvásárlási kérés küldése:', `${this.apiUrl}`, requestPayload);\n    return this.http.post(`${this.apiUrl}`, requestPayload);\n  }\n  getUserTickets() {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${this.apiUrl}/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    return this.http.get(endpoint);\n  }\n  cancelTicket(ticketId) {\n    console.log('Jegy lemondása:', `${this.apiUrl}/cancel/${ticketId}`);\n    // Alternatív formátumban próbáljuk a lemondást\n    return this.http.post(`${this.apiUrl}/cancel/${ticketId}`, {\n      ticketId: ticketId\n    });\n  }\n  getEventTickets(eventId) {\n    // Használjuk a már meglévő apiUrl változót a konzisztencia érdekében\n    console.log('Eseményjegyek lekérése:', `${this.apiUrl}/event/${eventId}`);\n    return this.http.get(`${this.apiUrl}/event/${eventId}`);\n  }\n  static {\n    this.ɵfac = function TicketService_Factory(t) {\n      return new (t || TicketService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: TicketService,\n      factory: TicketService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","TicketService","constructor","http","apiUrl","purchaseTicket","eventId","categoryId","quantity","requestPayload","console","log","post","getUserTickets","endpoint","get","cancelTicket","ticketId","getEventTickets","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["D:\\SZTE_PROGINFO\\programrendszerek_fejlesztese\\TicketPortal\\frontend\\src\\app\\services\\ticket.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '../../environments/environment';\nimport { Ticket } from '../models/ticket.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TicketService {\n  // Feltételezzük, hogy az environment.apiUrl már tartalmazza az '/api' előtagot\n  private apiUrl = `${environment.apiUrl}/tickets`;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Jegy vásárlása\n   * @param eventId Esemény azonosító\n   * @param categoryId A jegy kategória azonosítója\n   * @param quantity Megvásárolni kívánt jegyek száma\n   */\n  purchaseTicket(eventId: string, categoryId: string, quantity: number): Observable<Ticket> {\n    // Vizsgáljuk meg még egyéb lehetőségeket a backend API-val\n    // A legtisztább végpont: a sima /api/tickets\n    const requestPayload = {\n      eventId: eventId,\n      categoryId: categoryId,\n      quantity: quantity\n    };\n    \n    console.log('Jegyvásárlási kérés küldése:', `${this.apiUrl}`, requestPayload);\n    return this.http.post<Ticket>(`${this.apiUrl}`, requestPayload);\n  }\n\n  getUserTickets(): Observable<Ticket[]> {\n    // Alternatív végpontokat próbálunk, mert az eredeti 500-as hibát ad\n    // 1. Végpont: /api/tickets/my-tickets\n    const endpoint = `${this.apiUrl}/my-tickets`;\n    console.log('Felhasználói jegyek lekérése:', endpoint);\n    \n    return this.http.get<Ticket[]>(endpoint);\n  }\n\n  cancelTicket(ticketId: string): Observable<void> {\n    console.log('Jegy lemondása:', `${this.apiUrl}/cancel/${ticketId}`);\n    // Alternatív formátumban próbáljuk a lemondást\n    return this.http.post<void>(`${this.apiUrl}/cancel/${ticketId}`, {\n      ticketId: ticketId\n    });\n  }\n\n  getEventTickets(eventId: string): Observable<Ticket[]> {\n    // Használjuk a már meglévő apiUrl változót a konzisztencia érdekében\n    console.log('Eseményjegyek lekérése:', `${this.apiUrl}/event/${eventId}`);\n    return this.http.get<Ticket[]>(`${this.apiUrl}/event/${eventId}`);\n  }\n} "],"mappings":"AAGA,SAASA,WAAW,QAAQ,gCAAgC;;;AAM5D,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAHxB;IACQ,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,UAAU;EAET;EAEvC;;;;;;EAMAC,cAAcA,CAACC,OAAe,EAAEC,UAAkB,EAAEC,QAAgB;IAClE;IACA;IACA,MAAMC,cAAc,GAAG;MACrBH,OAAO,EAAEA,OAAO;MAChBC,UAAU,EAAEA,UAAU;MACtBC,QAAQ,EAAEA;KACX;IAEDE,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAE,GAAG,IAAI,CAACP,MAAM,EAAE,EAAEK,cAAc,CAAC;IAC7E,OAAO,IAAI,CAACN,IAAI,CAACS,IAAI,CAAS,GAAG,IAAI,CAACR,MAAM,EAAE,EAAEK,cAAc,CAAC;EACjE;EAEAI,cAAcA,CAAA;IACZ;IACA;IACA,MAAMC,QAAQ,GAAG,GAAG,IAAI,CAACV,MAAM,aAAa;IAC5CM,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEG,QAAQ,CAAC;IAEtD,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAWD,QAAQ,CAAC;EAC1C;EAEAE,YAAYA,CAACC,QAAgB;IAC3BP,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAE,GAAG,IAAI,CAACP,MAAM,WAAWa,QAAQ,EAAE,CAAC;IACnE;IACA,OAAO,IAAI,CAACd,IAAI,CAACS,IAAI,CAAO,GAAG,IAAI,CAACR,MAAM,WAAWa,QAAQ,EAAE,EAAE;MAC/DA,QAAQ,EAAEA;KACX,CAAC;EACJ;EAEAC,eAAeA,CAACZ,OAAe;IAC7B;IACAI,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,GAAG,IAAI,CAACP,MAAM,UAAUE,OAAO,EAAE,CAAC;IACzE,OAAO,IAAI,CAACH,IAAI,CAACY,GAAG,CAAW,GAAG,IAAI,CAACX,MAAM,UAAUE,OAAO,EAAE,CAAC;EACnE;;;uBA9CWL,aAAa,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbrB,aAAa;MAAAsB,OAAA,EAAbtB,aAAa,CAAAuB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}